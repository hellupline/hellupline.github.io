# Copyright 2020 hellupline
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
AWSTemplateFormatVersion: '2010-09-09'

Description: 'Static Website with CDN.'

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label: {default: 'Website Configuration'}
            Parameters:
              - AcmCertificateArn
              - DomainNames
          - Label: {default: 'Project Configuration'}
            Parameters:
              - ProjectName
              - ProjectStack
        ParameterLabels:
            AcmCertificateArn: {default: 'SSL certificate to use for the CloudFront distribution.'}
            DomainNames: {default: 'Domain names for this website.'}
            ProjectName: {default: 'Name your project.'}
            ProjectStack: {default: 'Which stack your project belongs?'}

Parameters:
    AcmCertificateArn:
        Description: 'ACM Certificate. Must be created in the us-east-1!'
        Type: String
    DomainNames:
        Description: 'The website domain name, comma separated list.'
        Type: 'List<String>'
    ProjectName:
        Description: 'Name of your project.'
        Type: String
    ProjectStack:
        Description: 'Stack of your project.'
        Type: String

Resources:
    Distribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Comment: !Sub 'CDN for cloudformation ${AWS::StackName}'
                Aliases: !Ref DomainNames
                Enabled: true
                HttpVersion: 'http2'
                IPV6Enabled: true
                PriceClass: 'PriceClass_All'
                ViewerCertificate:
                    AcmCertificateArn: !Ref AcmCertificateArn
                    MinimumProtocolVersion: 'TLSv1.2_2018'
                    SslSupportMethod: 'sni-only'
                Origins:
                  - DomainName: !GetAtt Bucket.DomainName
                    Id: 's3origin'
                    S3OriginConfig:
                        OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
                Logging:
                    Bucket: !GetAtt LogsBucket.DomainName
                DefaultCacheBehavior:
                    TargetOriginId: 's3origin'
                    ViewerProtocolPolicy: 'redirect-to-https'
                    Compress: true
                    SmoothStreaming: false
                    MaxTTL: 86400 # in seconds
                    MinTTL: 60 # in seconds
                    DefaultTTL: 3600 # in seconds
                    LambdaFunctionAssociations:
                      - LambdaFunctionARN: !Ref IndexFunctionVersion
                        EventType: viewer-request
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: 'none'
                    AllowedMethods:
                      - 'HEAD'
                      - 'GET'
                      - 'OPTIONS'
                    CachedMethods:
                      - 'HEAD'
                      - 'GET'
                      - 'OPTIONS'
                DefaultRootObject: 'index.html'
                CustomErrorResponses:
                  - ErrorCachingMinTTL: 300
                    ErrorCode: 403
                    ResponseCode: 200
                    ResponsePagePath: '/index.html'
            Tags:
              - {Key: Name, Value: !Ref ProjectName}
              - {Key: stack, Value: !Ref ProjectStack}

    CloudFrontOriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: !Sub 'access-identity-${Bucket.WebsiteURL}'

    Bucket:
        Type: AWS::S3::Bucket
        UpdateReplacePolicy: Retain
        DeletionPolicy: Retain
        Properties:
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  - ServerSideEncryptionByDefault:
                        SSEAlgorithm: AES256
            VersioningConfiguration:
                Status: Enabled
            LifecycleConfiguration:
                Rules:
                  - Id: IncompleteUploads
                    Status: Enabled
                    AbortIncompleteMultipartUpload:
                        DaysAfterInitiation: 7
                  - Id: VersionsCleanup
                    Status: Enabled
                    NoncurrentVersionExpirationInDays: 365
            Tags:
              - {Key: Name, Value: !Ref ProjectName}
              - {Key: stack, Value: !Ref ProjectStack}

    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref Bucket
            PolicyDocument:
                Statement:
                  - Effect: Allow
                    Principal:
                        CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
                    Action:
                      - 's3:GetObject'
                    Resource:
                      - !Sub '${Bucket.Arn}/*'

    LogsBucket:
        Type: AWS::S3::Bucket
        UpdateReplacePolicy: Retain
        DeletionPolicy: Retain
        Properties:
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  - ServerSideEncryptionByDefault:
                        SSEAlgorithm: AES256
            VersioningConfiguration:
                Status: Enabled
            LifecycleConfiguration:
                Rules:
                  - Id: IncompleteUploads
                    Status: Enabled
                    AbortIncompleteMultipartUpload:
                        DaysAfterInitiation: 7
                  - Id: VersionCleanup
                    Status: Enabled
                    NoncurrentVersionExpirationInDays: 30
            Tags:
              - {Key: Name, Value: !Ref ProjectName}
              - {Key: stack, Value: !Ref ProjectStack}

    IndexFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: !Sub 'Handle subdir index.html for cloudformation ${AWS::StackName}'
            Role: !GetAtt IndexFunctionRole.Arn
            Handler: index.lambda_handler
            Runtime: python3.7
            Code:
                ZipFile: |
                    import os
                    DEFAULT_NAME = "index.html"
                    def lambda_handler(event, context):
                        """
                        Redirects URLs to default document. Examples:
                        /blog/posts/     -> /blog/posts/index.html
                        /blog/header.png -> /blog/header.png
                        """
                        request = event["Records"][0]["cf"]["request"]
                        uri = request["uri"]
                        if uri != "/":
                            _, fname = os.path.split(uri)
                            if not fname:
                                request["uri"] = os.path.join(uri, DEFAULT_NAME)
                        return request
            Tags:
              - {Key: Name, Value: !Ref ProjectName}
              - {Key: stack, Value: !Ref ProjectStack}

    IndexFunctionVersion:
        Type: AWS::Lambda::Version
        Properties:
            Description: !Sub 'Handle subdir index.html for cloudformation ${AWS::StackName}'
            FunctionName: !GetAtt IndexFunction.Arn

    5xxErrorRateTooHighAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmDescription: !Sub '5xx errors on cloudfront ${Distribution}'
            ActionsEnabled: true
            AlarmActions: []
            OKActions: []
            InsufficientDataActions: []
            Dimensions:
              - {Name: Region, Value: Global}
              - {Name: DistributionId, Value: !Ref Distribution}
            Namespace: AWS/CloudFront
            MetricName: 5xxErrorRate
            EvaluationPeriods: 1
            Period: 60
            ComparisonOperator: GreaterThanThreshold
            Statistic: Average
            Threshold: 0
            TreatMissingData: notBreaching

    LambdaExecutionErrorTooHighAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmDescription: !Sub 'Lambde@Edge execution errors on cloudfront ${Distribution}'
            ActionsEnabled: true
            AlarmActions: []
            OKActions: []
            InsufficientDataActions: []
            Dimensions:
              - {Name: Region, Value: Global}
              - {Name: DistributionId, Value: !Ref Distribution}
            Namespace: AWS/CloudFront
            MetricName: LambdaExecutionError
            EvaluationPeriods: 1
            Period: 60
            ComparisonOperator: GreaterThanThreshold
            Statistic: Sum
            Threshold: 0
            TreatMissingData: notBreaching

    LambdaValidationErrorTooHighAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmDescription: !Sub 'Lambde@Edge invalid responses on cloudfront ${Distribution}'
            ActionsEnabled: true
            AlarmActions: []
            OKActions: []
            InsufficientDataActions: []
            Dimensions:
              - {Name: Region, Value: Global}
              - {Name: DistributionId, Value: !Ref Distribution}
            Namespace: AWS/CloudFront
            MetricName: LambdaValidationError
            EvaluationPeriods: 1
            Period: 60
            ComparisonOperator: GreaterThanThreshold
            Statistic: Sum
            Threshold: 0
            TreatMissingData: notBreaching

Outputs:
    DistributionId:
        Value: !Ref Distribution
    DistributionDomainName:
        Value: !GetAtt Distribution.DomainName

    IndexFunctionVersion:
        Value: !Ref IndexFunctionVersion
    IndexFunction:
        Value: !Ref IndexFunction
    IndexFunctionArn:
        Value: !GetAtt IndexFunction.Arn

    Bucket:
        Value: !Ref Bucket
    BucketArn:
        Value: !Ref Bucket.Arn
    BucketDomainName:
        Value: !Ref Bucket.DomainName
    BucketDualStackDomainName:
        Value: !Ref Bucket.DualStackDomainName
    BucketRegionDomainName:
        Value: !Ref Bucket.RegionDomainName
    BucketWebsiteURL:
        Value: !Ref Bucket.WebsiteURL

    LogsBucket:
        Value: !Ref LogsBucket
    LogsBucketArn:
        Value: !Ref LogsBucket.Arn

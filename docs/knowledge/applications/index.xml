<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>applications on HellUpLine Stuffs</title><link>https://hellupline.dev/docs/knowledge/applications/</link><description>Recent content in applications on HellUpLine Stuffs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/docs/knowledge/applications/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes</title><link>https://hellupline.dev/docs/knowledge/applications/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/knowledge/applications/kubernetes/</guid><description>Kubernetes Plugins Dashboard Repository
Metrics Server Repository
Local Path Provisioner Repository
Proxied Dashboard
# Dashboard kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta3/aio/deploy/recommended.yaml # Metrics Server kubectl apply \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/aggregated-metrics-reader.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/auth-delegator.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/auth-reader.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/metrics-apiservice.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/metrics-server-deployment.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/metrics-server-service.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/resource-reader.yaml kubectl get apiservice v1beta1.metrics.k8s.io --output json | jq &amp;#39;.status.conditions[]&amp;#39; # Local Path Provisioner kubectl apply --filename https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.9/deploy/local-path-storage.yaml # ServiceAccount Token kubectl --namespace kube-system get --output json secrets &amp;#34;$(kubectl --namespace kube-system get --output json serviceaccounts default | jq --raw-output &amp;#39;.</description></item><item><title>Mysql</title><link>https://hellupline.dev/docs/knowledge/applications/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/knowledge/applications/mysql/</guid><description>Create user CREATE USER &amp;#39;user&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;PASSWORD&amp;#39;; GRANT SELECT on DATABASE.* TO &amp;#39;user&amp;#39;@&amp;#39;%&amp;#39;; Allow Kill process on RDS GRANT EXECUTE ON PROCEDURE `mysql`.`rds_kill_query` TO `operator`@`%`; GRANT EXECUTE ON PROCEDURE `mysql`.`rds_kill` TO `operator`@`%`; GRANT SELECT ON TABLE `information_schema`.`PROCESSLIST` TO `operator`@`%`;</description></item><item><title>Nginx</title><link>https://hellupline.dev/docs/knowledge/applications/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/knowledge/applications/docker/</guid><description>Run Container docker container run --rm --interactive --tty --name=stuff \ --volume=&amp;#34;${PWD}:/data&amp;#34; \ --network=&amp;#34;my_net&amp;#34; \ --publish=&amp;#34;8080:80&amp;#34; \ --env=&amp;#34;CONFIG_VALUE=my-app&amp;#34; \ --env-file=&amp;#34;prod.env&amp;#34; \ --workdir=&amp;#34;/data&amp;#34; \ alpine Build docker build --tag my_registry/my_app:my_version --file ./Dockerfile ./ docker push my_registry/my_app:my_version docker tag my_registry/my_app:my_version my_registry/my_app:latest docker push my_registry/my_app:latest Multi-Stage Dockerfile FROMgolang:1.13 as buildWORKDIR/appCOPY ./ ./RUN go build -o my_appFROMalpine:latestRUN apk --no-cache add ca-certificatesWORKDIR/appCOPY --from=builder /app/my_app ./CMD [&amp;#34;./my_app&amp;#34;]Volumes docker volume create my_volume docker volume ls docker volume rm my_volume Network docker network create my_net docker network ls docker network rm my_net Running containers docker container ls docker container logs my_container docker container exec -it my_container my_command docker container attach my_container System docker system events docker system info docker system prune --volumes --all Login to AWS ECR $(aws ecr get-login --no-include-email)</description></item><item><title>Nginx</title><link>https://hellupline.dev/docs/knowledge/applications/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/knowledge/applications/nginx/</guid><description>Run a simple static site with nginx and docker docker run --rm -it --name=static-site \ --volume &amp;#34;${PWD}/public:/usr/share/nginx/html&amp;#34; \ --publish 8080:80 \ --workdir /usr/share/nginx/html \ nginx Run with configuration files docker run --rm -it --name=static-site \ --volume &amp;#34;${PWD}/conf.d:/etc/nginx/conf.d/&amp;#34; \ --volume &amp;#34;${PWD}/public:/usr/share/nginx/html&amp;#34; \ --publish 8080:80 \ --workdir /usr/share/nginx/html \ nginx</description></item><item><title>Postgresql</title><link>https://hellupline.dev/docs/knowledge/applications/postgresql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/knowledge/applications/postgresql/</guid><description>Show where a user has permissions SELECT a.schemaname, a.tablename, b.usename, HAS_TABLE_PRIVILEGE(b.usename, a.schemaname || &amp;#39;.&amp;#39; || a.tablename, &amp;#39;select&amp;#39;) as select, HAS_TABLE_PRIVILEGE(b.usename, a.schemaname || &amp;#39;.&amp;#39; || a.tablename, &amp;#39;insert&amp;#39;) as insert, HAS_TABLE_PRIVILEGE(b.usename, a.schemaname || &amp;#39;.&amp;#39; || a.tablename, &amp;#39;update&amp;#39;) as update, HAS_TABLE_PRIVILEGE(b.usename, a.schemaname || &amp;#39;.&amp;#39; || a.tablename, &amp;#39;delete&amp;#39;) as delete, HAS_TABLE_PRIVILEGE(b.usename, a.schemaname || &amp;#39;.&amp;#39; || a.tablename, &amp;#39;references&amp;#39;) as references FROM pg_tables a, pg_user b WHERE a.schemaname = &amp;#39;example_schema&amp;#39;; Show objects ownership SELECT nsp.nspname as object_schema, cls.</description></item></channel></rss>
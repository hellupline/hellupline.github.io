<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nginx on hellupline notes</title><link>https://hellupline.dev/docs/configurations/nginx/</link><description>Recent content in nginx on hellupline notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/docs/configurations/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>cached-proxy</title><link>https://hellupline.dev/docs/configurations/nginx/cached-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/configurations/nginx/cached-proxy/</guid><description>Download proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=app_cache:10m; proxy_cache_key &amp;#34;$scheme$request_method$host$request_uri&amp;#34;; server { listen [::]:80 default_server; listen 80 default_server; server_name _; location / { add_header X-Cache-Status $upstream_cache_status; proxy_pass http://localhost:9001; proxy_cache app_cache; proxy_cache_bypass $http_no_cache; } } # server 01 server { listen [::]:9001; listen 9001; server_name _; # nginx will use Cache-Control and expires to manage cache add_header Cache-Control &amp;#34;public&amp;#34;; expires 30d; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 01&amp;#34;; } docker run --detach --name nginx-cached-proxy \ --volume &amp;#34;${PWD}/cached-proxy.</description></item><item><title>hls-stream</title><link>https://hellupline.dev/docs/configurations/nginx/hls-stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/configurations/nginx/hls-stream/</guid><description>Download load_module modules/ngx_stream_module.so; user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /var/run/nginx.pid; events { worker_connections 1024; } rtmp { server { listen 1935; # Listen on standard RTMP port chunk_size 4000; application show { live on; # disable consuming the stream from nginx as rtmp deny play all; # Turn on HLS hls on; hls_path /data/hls/; hls_fragment 3; hls_playlist_length 60; hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution } } } docker run --detach --name nginx-hls-stream \ --volume &amp;#34;${PWD}/hls-stream.</description></item><item><title>https</title><link>https://hellupline.dev/docs/configurations/nginx/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/configurations/nginx/https/</guid><description> Download server { listen [::]:443 default_server ssl http2; listen 443 default_server ssl http2; server_name localhost; ssl_certificate /etc/letsencrypt/live/localhost/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/localhost/privkey.pem; return 200 &amp;#34;hello world: server 01&amp;#34;; } make-cacert org.local make-cacert-certificate localhost docker run --detach --name nginx-https \ --volume &amp;#34;${PWD}/https.conf:/etc/nginx/conf.d/default.conf&amp;#34; \ --volume &amp;#34;${PWD}/tls-certs/service.pem:/etc/letsencrypt/live/localhost/fullchain.pem&amp;#34; \ --volume &amp;#34;${PWD}/tls-certs/service.pem:/etc/letsencrypt/live/localhost/chain.pem&amp;#34; \ --volume &amp;#34;${PWD}/tls-certs/service.key:/etc/letsencrypt/live/localhost/privkey.pem&amp;#34; \ --publish &amp;#34;4443:443&amp;#34; \ --workdir &amp;#34;/usr/share/nginx/html/&amp;#34; \ nginx curl -SsD- --cacert tls-certs/rootca.cert https://localhost:4443/ docker stop nginx-https docker rm nginx-https</description></item><item><title>load-balancer</title><link>https://hellupline.dev/docs/configurations/nginx/load-balancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/configurations/nginx/load-balancer/</guid><description>Download upstream app01 { least_conn; server localhost:9001 weight=5; server localhost:9002; server localhost:9003 backup; } upstream app02 { ip_hash; server localhost:9004 weight=5; server localhost:9005; server localhost:9006 down; } server { listen [::]:80 default_server; listen 80 default_server; server_name _; location /app01 { proxy_pass http://app01; } location /app02 { proxy_pass http://app02; } } # server 01 server { listen [::]:9001; listen 9001; server_name _; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 01&amp;#34;; } # server 02 server { listen [::]:9002; listen 9002; server_name _; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 02&amp;#34;; } # server 03 server { listen [::]:9003; listen 9003; server_name _; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 03&amp;#34;; } # server 04 server { listen [::]:9004; listen 9004; server_name _; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 04&amp;#34;; } # server 05 server { listen [::]:9005; listen 9005; server_name _; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 05&amp;#34;; } # server 06 server { listen [::]:9006; listen 9006; server_name _; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 06&amp;#34;; } docker run --detach --name nginx-load-balancer \ --volume &amp;#34;${PWD}/load-balancer.</description></item><item><title>password</title><link>https://hellupline.dev/docs/configurations/nginx/password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/configurations/nginx/password/</guid><description>Download server { listen [::]:80 default_server; listen 80 default_server; server_name _; auth_basic_user_file /etc/nginx/server.htpasswd; auth_basic &amp;#34;Administratorâ€™s Area&amp;#34;; location /public { auth_basic off; proxy_pass http://localhost:9002; } location / { proxy_pass http://localhost:9001; } } # server 01 server { listen [::]:9001; listen 9001; server_name _; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 01&amp;#34;; } # server 02 server { listen [::]:9002; listen 9002; server_name _; add_header Content-Type &amp;#34;text/plain&amp;#34;; return 200 &amp;#34;hello world: server 02&amp;#34;; } # generate your passwod # htpasswd -c .</description></item><item><title>redirect</title><link>https://hellupline.dev/docs/configurations/nginx/redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/configurations/nginx/redirect/</guid><description> Download map $request_uri $new_uri { # fix published urls /wrong-path &amp;#34;https://${host}/correct-path&amp;#34;; # force https for others default &amp;#34;https://${host}${request_uri}&amp;#34;; } server { listen [::]:80 default_server; listen 80 default_server; server_name _; return 301 $new_uri; } docker run --detach --name nginx-redirect \ --volume &amp;#34;${PWD}/redirect.conf:/etc/nginx/conf.d/default.conf&amp;#34; \ --publish &amp;#34;8080:80&amp;#34; \ --workdir &amp;#34;/usr/share/nginx/html/&amp;#34; \ nginx curl -SsD- http://localhost:8080/ curl -SsD- -H &amp;#34;Host: www.example.com&amp;#34; http://localhost:8080/wrong-path curl -SsD- -H &amp;#34;Host: www.example.com&amp;#34; http://localhost:8080/others docker stop nginx-redirect docker rm nginx-redirect</description></item><item><title>static-files</title><link>https://hellupline.dev/docs/configurations/nginx/static-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/configurations/nginx/static-files/</guid><description>Download server { listen [::]:80 default_server; listen 80 default_server; server_name _; root /var/www/static-files; # gzip gzip_disable &amp;#34;msie6&amp;#34;; gzip on; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml; # allow safe files location ~* \.(?:css(\.map)?|js(\.map)?|ttf|ttc|otf|eot|woff2?|svgz?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv|pdf|docx?|dotx?|docm|dotm|xlsx?|xltx?|xlsm|xltm|pptx?|potx?|pptm|potm|ppsx?)$ { add_header Access-Control-Allow-Origin &amp;#34;*&amp;#34;; add_header Cache-Control &amp;#34;public&amp;#34;; expires 30d; access_log off; } # single page application location / { try_files $uri $uri/ /index.html; } } curl -Ss --create-dirs -o files/Helmet1.</description></item><item><title>tcp-proxy</title><link>https://hellupline.dev/docs/configurations/nginx/tcp-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/configurations/nginx/tcp-proxy/</guid><description> Download load_module modules/ngx_stream_module.so; user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /var/run/nginx.pid; events { worker_connections 1024; } stream { log_format main &amp;#39;$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time&amp;#39;; access_log /var/log/nginx/access.log main; upstream my-tcp-app { server my-tcp-app:9000; } server { listen 9000 so_keepalive=on; proxy_pass my-tcp-app; } } docker run --detach --name nginx-tcp-proxy \ --volume &amp;#34;${PWD}/tcp-proxy.conf:/etc/nginx/nginx.conf&amp;#34; \ --publish &amp;#34;9000:9000&amp;#34; \ --workdir &amp;#34;/usr/share/nginx/&amp;#34; \ nginx telnet localhost 9000 docker stop nginx-tcp-proxy docker rm nginx-tcp-proxy</description></item></channel></rss>
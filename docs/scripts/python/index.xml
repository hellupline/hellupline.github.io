<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on hellupline notes</title><link>https://hellupline.dev/docs/scripts/python/</link><description>Recent content in python on hellupline notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/docs/scripts/python/index.xml" rel="self" type="application/rss+xml"/><item><title>asyncio-queue-requests</title><link>https://hellupline.dev/docs/scripts/python/asyncio-queue-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/python/asyncio-queue-requests/</guid><description>Download #!/usr/bin/env python3 # poetry add httpx==&amp;#39;^0.23.0&amp;#39; pyquery==&amp;#39;^1.4.3&amp;#39; import logging from asyncio import Event from asyncio import Queue from asyncio import create_task from asyncio import gather from asyncio import run from asyncio.exceptions import CancelledError from functools import partial from typing import Any from typing import Callable from typing import Coroutine from urllib.parse import urlparse from httpx import AsyncClient from pyquery import PyQuery logging.basicConfig() logger = logging.getLogger(__name__) visited: set[str] = set() async def main(): queue_request_urls = Queue() queue_extract_urls = Queue() queue_print_title = Queue() event_completed = Event() await queue_request_urls.</description></item><item><title>ftpython</title><link>https://hellupline.dev/docs/scripts/python/ftpython/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/python/ftpython/</guid><description>Download #!/usr/bin/env python3 # FLASK_APP=ftpython flask run \ # --reload --no-debugger --eager-loading --with-threads \ # --host=127.0.0.1 --port=8080 # python3 -m pip install --user flask # python3 ftpython # from OpenSSL import SSL import os from flask import Flask, flash, request, redirect, url_for from werkzeug.middleware.shared_data import SharedDataMiddleware from werkzeug.utils import secure_filename UPLOAD_FOLDER = os.getcwd() ALLOWED_EXTENSIONS = {&amp;#34;txt&amp;#34;, &amp;#34;pdf&amp;#34;, &amp;#34;png&amp;#34;, &amp;#34;jpg&amp;#34;, &amp;#34;jpeg&amp;#34;, &amp;#34;gif&amp;#34;} FORM_TEMPLATE = &amp;#34;&amp;#34;&amp;#34;&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Upload new File&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Upload new File&amp;lt;/h1&amp;gt; &amp;lt;form method=post enctype=multipart/form-data&amp;gt; &amp;lt;input type=file name=file&amp;gt; &amp;lt;input type=submit value=Upload&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;&amp;#34;&amp;#34;&amp;#34; # context = SSL.</description></item><item><title>opensearch-export-csv</title><link>https://hellupline.dev/docs/scripts/python/opensearch-export-csv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/python/opensearch-export-csv/</guid><description>Download #!/usr/bin/env python3 import csv import datetime import boto3 from opensearchpy import OpenSearch from opensearchpy import RequestsHttpConnection from opensearchpy.helpers import scan from requests_aws4auth import AWS4Auth region_name = &amp;#34;us-east-1&amp;#34; service = &amp;#34;es&amp;#34; domain_name = &amp;#34;my_domain&amp;#34; aws = boto3.Session() credentials = aws.get_credentials() opensearch = aws.client(&amp;#34;opensearch&amp;#34;, region_name=region_name) r = opensearch.describe_domain(DomainName=domain_name) host = r[&amp;#34;DomainStatus&amp;#34;][&amp;#34;Endpoint&amp;#34;] awsauth = AWS4Auth( # access_id=credentials.access_key, # secret_key=credentials.secret_key, # session_token=credentials.token, region=region_name, service=service, refreshable_credentials=credentials, ) search = OpenSearch( hosts=[{&amp;#34;host&amp;#34;: host, &amp;#34;port&amp;#34;: 443}], http_auth=awsauth, use_ssl=True, verify_certs=True, connection_class=RequestsHttpConnection, ) match_host = { &amp;#34;bool&amp;#34;: { &amp;#34;should&amp;#34;: [ {&amp;#34;match_phrase&amp;#34;: {&amp;#34;ClientRequestHost&amp;#34;: &amp;#34;example-1.</description></item><item><title>simple-https</title><link>https://hellupline.dev/docs/scripts/python/simple-https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/python/simple-https/</guid><description> Download #! /usr/bin/env python3 import http.server import functools import ssl CERT_FILE = &amp;#34;tls-certs/service.pem&amp;#34; KEY_FILE = &amp;#34;tls-certs/service.key&amp;#34; DIRECTORY = &amp;#34;./&amp;#34; handler = functools.partial(http.server.SimpleHTTPRequestHandler, directory=DIRECTORY) httpd = http.server.HTTPServer((&amp;#34;localhost&amp;#34;, 4443), handler) httpd.socket = ssl.wrap_socket(httpd.socket, certfile=CERT_FILE, keyfile=KEY_FILE, server_side=True) httpd.serve_forever()</description></item></channel></rss>
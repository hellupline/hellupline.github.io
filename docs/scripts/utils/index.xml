<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>utils on HellUpLine Stuffs</title><link>https://hellupline.dev/docs/scripts/utils/</link><description>Recent content in utils on HellUpLine Stuffs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/docs/scripts/utils/index.xml" rel="self" type="application/rss+xml"/><item><title>cached</title><link>https://hellupline.dev/docs/scripts/utils/cached/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/utils/cached/</guid><description> Download #!/bin/sh # Usage: # $ cached &amp;#34;command&amp;#34; &amp;#34;cache-file&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 2 ] || die &amp;#34;2 argument required, $#provided&amp;#34; COMMAND=&amp;#34;${1}&amp;#34; FILENAME=&amp;#34;${2}&amp;#34; if [ -f &amp;#34;${FILENAME}&amp;#34; ]; then cat &amp;#34;${FILENAME}&amp;#34; else sh -c &amp;#34;${COMMAND}&amp;#34; | tee &amp;#34;${FILENAME}&amp;#34; fi</description></item><item><title>clipboard-watch</title><link>https://hellupline.dev/docs/scripts/utils/clipboard-watch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/utils/clipboard-watch/</guid><description> Download #!/bin/sh # Usage: # show-certs &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist LAST=&amp;#34;&amp;#34; while :; do CURRENT=$(xclip -selection primary -out) if [ &amp;#34;${CURRENT}&amp;#34; != &amp;#34;${LAST}&amp;#34; ]; then notify-send -- &amp;#34;Added ${CURRENT}&amp;#34; LAST=&amp;#34;${CURRENT}&amp;#34; echo &amp;#34;${CURRENT}&amp;#34; fi done</description></item><item><title>lets-encrypt-cloudflare</title><link>https://hellupline.dev/docs/scripts/utils/lets-encrypt-cloudflare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/utils/lets-encrypt-cloudflare/</guid><description>Download #!/bin/bash # Usage: # lets-encrypt-cloudflare &amp;#34;root@hellupline.dev&amp;#34; &amp;#34;CLOUDFLARE_API_KEY&amp;#34; &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 3 ] || die &amp;#34;3 argument required, $#provided&amp;#34; EMAIL=&amp;#34;${1}&amp;#34; CLOUDFLARE_API_KEY=&amp;#34;${2}&amp;#34; DOMAIN=&amp;#34;${3}&amp;#34; echo &amp;#34;dns_cloudflare_email=${EMAIL}\ndns_cloudflare_api_key=${CLOUDFLARE_API_KEY}&amp;#34; &amp;gt; dns-cloudflare.ini chmod 400 dns-cloudflare.ini docker run --rm -it --name certbot \ --volume &amp;#34;${PWD}/etc-letsencrypt:/etc/letsencrypt&amp;#34; \ --volume &amp;#34;${PWD}/var-lib-letsencrypt:/var/lib/letsencrypt&amp;#34; \ --volume &amp;#34;${PWD}/dns-cloudflare.</description></item><item><title>lets-encrypt-cname</title><link>https://hellupline.dev/docs/scripts/utils/lets-encrypt-cname/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/utils/lets-encrypt-cname/</guid><description> Download #!/bin/bash # Usage: # lets-encrypt-cname &amp;#34;root@hellupline.dev&amp;#34; &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 2 ] || die &amp;#34;2 argument required, $#provided&amp;#34; EMAIL=&amp;#34;${1}&amp;#34; DOMAIN=&amp;#34;${2}&amp;#34; docker run --rm -it --name certbot \ --volume &amp;#34;${PWD}/etc-letsencrypt:/etc/letsencrypt&amp;#34; \ --volume &amp;#34;${PWD}/var-lib-letsencrypt:/var/lib/letsencrypt&amp;#34; \ certbot/certbot \ certonly --dry-run \ --manual-public-ip-logging-ok --agree-tos --email=&amp;#34;${EMAIL}&amp;#34; \ --manual \ --preferred-challenges=dns \ --domains=&amp;#34;${DOMAIN}&amp;#34;</description></item><item><title>make-certificate</title><link>https://hellupline.dev/docs/scripts/utils/make-certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/utils/make-certificate/</guid><description> Download #!/bin/bash # Usage: # make-certificate &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist DOMAIN=${1:-localhost} mkdir -p tls-certs openssl req -nodes -x509 -sha256 -days 3650 \ -newkey rsa:4096 \ -keyout tls-certs/service.key \ -out tls-certs/service.pem \ -addext &amp;#34;subjectAltName = DNS:${DOMAIN},IP:::1,IP:127.0.0.1&amp;#34; \ -subj &amp;#34;/O=${DOMAIN}/CN=${DOMAIN}&amp;#34;</description></item><item><title>make-self-cacert</title><link>https://hellupline.dev/docs/scripts/utils/make-self-cacert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/utils/make-self-cacert/</guid><description>Download #!/bin/bash # Usage: # make-self-cacert &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist DOMAIN=${1:-localhost} mkdir -p tls-certs # create rootca certs openssl genrsa -out tls-certs/rootca.key 4096 openssl req -x509 -new -sha256 -days 3650 \ -key tls-certs/rootca.key -out tls-certs/rootca.cert \ -subj &amp;#34;/O=${DOMAIN}/CN=${DOMAIN}&amp;#34; # create application certs openssl genrsa -out tls-certs/service.</description></item><item><title>show-certs</title><link>https://hellupline.dev/docs/scripts/utils/show-certs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/utils/show-certs/</guid><description> Download #!/bin/sh # Usage: # show-certs &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 1 ] || die &amp;#34;1 argument required, $#provided&amp;#34; DOMAIN=&amp;#34;${1}&amp;#34; echo | openssl s_client -servername ${DOMAIN} -connect ${DOMAIN}:443 -showcerts | openssl x509 -text</description></item><item><title>simple-https</title><link>https://hellupline.dev/docs/scripts/utils/simple-https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/scripts/utils/simple-https/</guid><description> Download #! /usr/bin/env python3 from http.server import HTTPServer, SimpleHTTPRequestHandler from functools import partial from ssl import wrap_socket CERT_FILE = &amp;#34;tls-certs/service.pem&amp;#34; DIRECTORY = &amp;#34;./&amp;#34; handler = partial(SimpleHTTPRequestHandler, directory=DIRECTORY) httpd = HTTPServer((&amp;#34;localhost&amp;#34;, 4443), handler) httpd.socket = wrap_socket(httpd.socket, certfile=CERT_FILE, server_side=True) httpd.serve_forever()</description></item></channel></rss>
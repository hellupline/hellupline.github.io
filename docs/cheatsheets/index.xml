<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cheatsheets on hellupline notes</title><link>https://hellupline.dev/docs/cheatsheets/</link><description>Recent content in cheatsheets on hellupline notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/docs/cheatsheets/index.xml" rel="self" type="application/rss+xml"/><item><title>aws</title><link>https://hellupline.dev/docs/cheatsheets/aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/aws/</guid><description>describe ec2 as csv filter by environment==production beanstalk:environment-name==my-app
for PROFILE_NAME in &amp;#34;staging&amp;#34; &amp;#34;production&amp;#34;; do for AWS_REGION_NAME in $(aws --profile &amp;#34;${PROFILE_NAME}&amp;#34; --output json ec2 describe-regions | jq --raw-output &amp;#39;.Regions[].RegionName&amp;#39;); do aws \ --output json \ --profile &amp;#34;${PROFILE_NAME}&amp;#34; \ --region=&amp;#34;${AWS_REGION_NAME}&amp;#34; \ ec2 describe-instances done done | jq --raw-output --arg &amp;#39;beanstalk-name&amp;#39; &amp;#39;my-app&amp;#39; --arg &amp;#39;environment&amp;#39; &amp;#39;production&amp;#39; &amp;#39; [ .Reservations[].Instances[] | select(.State.Name == &amp;#34;running&amp;#34;) | select((first(.Tags[] | select(.Key == &amp;#34;elasticbeanstalk:environment-name&amp;#34;)).Value ) == $ARGS.</description></item><item><title>curl</title><link>https://hellupline.dev/docs/cheatsheets/curl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/curl/</guid><description>debug requests curl \ --silent \ --show-error \ --fail \ --fail-early \ --compressed \ --location \ --create-dirs \ --dump-header - \ --output /dev/null \ --write-out &amp;#39; ============= HOST: ========== local_ip: %{local_ip} local_port: %{local_port} remote_ip: %{remote_ip} remote_port: %{remote_port} ======= CONNECTION: ========== http_version: %{http_version} http_code: %{http_code} http_connect: %{http_connect} num_connects: %{num_connects} num_redirects: %{num_redirects} redirect_url: %{redirect_url} ============= FILE: ========== content_type: %{content_type} filename_effective: %{filename_effective} ftp_entry_path: %{ftp_entry_path} size_download: %{size_download} size_header: %{size_header} size_request: %{size_request} size_upload: %{size_upload} speed_download: %{speed_download} speed_upload: %{speed_upload} ssl_verify_result: %{ssl_verify_result} url_effective: %{url_effective} === TIME BREAKDOWN: ========== time_appconnect: %{time_appconnect} time_connect: %{time_connect} time_namelookup: %{time_namelookup} time_pretransfer: %{time_pretransfer} time_redirect: %{time_redirect} time_starttransfer: %{time_starttransfer} ---------- time_total: %{time_total} &amp;#39; \ --header &amp;#39;User-Agent: curl-debug/0.</description></item><item><title>desktop-linux</title><link>https://hellupline.dev/docs/cheatsheets/desktop-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/desktop-linux/</guid><description>send clicks to window eval &amp;#34;$(xdotool search --shell --name &amp;#39;Minecraft\* 1.18.2 - Multiplayer \(3rd-party Server\)&amp;#39;)&amp;#34; for WINDOW in ${WINDOWS[@]}; do eval &amp;#34;$(xdotool getwindowgeometry --shell &amp;#34;${WINDOW}&amp;#34;)&amp;#34; NX=&amp;#34;$((WIDTH * 50 / 100))&amp;#34; NY=&amp;#34;$((HEIGHT * 75 / 100))&amp;#34; xdotool mousemove --window &amp;#34;${WINDOW}&amp;#34; &amp;#34;${NX}&amp;#34; &amp;#34;${NY}&amp;#34;; sleep 1 # xdotool click --window &amp;#34;${WINDOW}&amp;#34; 1; sleep 1 xdotool key --window &amp;#34;${WINDOW}&amp;#34; Escape; sleep 1 xdotool mousedown --window &amp;#34;${WINDOW}&amp;#34; 1; sleep 1 done turn off display xset dpms force suspend add groups to user usermod --append --groups &amp;#39;docker&amp;#39; &amp;#39;hellupline&amp;#39; newgrp &amp;#39;docker&amp;#39; set default browser # gio mime x-scheme-handler/https brave-browser.</description></item><item><title>desktop-osx</title><link>https://hellupline.dev/docs/cheatsheets/desktop-osx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/desktop-osx/</guid><description>homebrew install homebrew /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; install packages HOMEBREW_NO_AUTO_UPDATE=1 brew install ... HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask ... notifications osascript -e &amp;#39;display notification &amp;#34;Body&amp;#34; with title &amp;#34;Title&amp;#34;&amp;#39; text to voice say &amp;#34;Hello World&amp;#34; clipboard pbpaste &amp;gt; output.txt pbcopy &amp;lt; input.txt</description></item><item><title>docker</title><link>https://hellupline.dev/docs/cheatsheets/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/docker/</guid><description>run container docker container run \ --name=stuff \ --rm \ --interactive \ --tty \ --volume=&amp;#34;${PWD}:/data&amp;#34; \ --network=&amp;#34;my_net&amp;#34; \ --publish=&amp;#34;8080:80&amp;#34; \ --env=&amp;#34;CONFIG_VALUE=my-app&amp;#34; \ --env-file=&amp;#34;prod.env&amp;#34; \ --workdir=&amp;#34;/data&amp;#34; \ alpine build docker build --tag my_registry/my_app:my_version --file ./Dockerfile ./ docker push my_registry/my_app:my_version docker tag my_registry/my_app:my_version my_registry/my_app:latest docker push my_registry/my_app:latest volumes docker volume create my_volume docker volume ls docker volume rm my_volume network docker network create my_net docker network ls docker network rm my_net running containers docker container ls docker container logs my_container docker container exec -it my_container my_command docker container attach my_container system docker system events docker system info docker system prune --volumes --all login to aws ecr aws \ --profile=&amp;#34;${PROFILE_NAME}&amp;#34; \ --region &amp;#34;${AWS_REGION_NAME}&amp;#34; \ ecr \ get-login-password \ | sudo docker login \ --username AWS \ --password-stdin \ &amp;#34;${AWS_ACCOUNT_ID}&amp;#34;.</description></item><item><title>ffmpeg</title><link>https://hellupline.dev/docs/cheatsheets/ffmpeg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/ffmpeg/</guid><description>stream desktop to udp address will stream a window, webcam, microfone and desktop audio
eval &amp;#34;$(xdotool search --shell --name &amp;#39;utils | hellupline notes - Brave&amp;#39;)&amp;#34; WINDOW=&amp;#34;${WINDOWS[1]}&amp;#34; eval &amp;#34;$(xdotool getwindowgeometry --shell &amp;#34;${WINDOW}&amp;#34;)&amp;#34; ffmpeg \ -hide_banner -loglevel info \ -hwaccel_output_format vaapi -threads 4 -probesize 5M -re \ -thread_queue_size 512 -f x11grab -s &amp;#34;${WIDTH}x${HEIGHT}&amp;#34; -video_size &amp;#34;${WIDTH}x${HEIGHT}&amp;#34; -framerate 60 -show_region 1 -draw_mouse 1 -window_id &amp;#34;${WINDOW}&amp;#34; -i &amp;#39;:0.0+0,0&amp;#39; \ -thread_queue_size 512 -f v4l2 -framerate 60 -i &amp;#39;/dev/video0&amp;#39; \ -thread_queue_size 512 -f pulse -ac 1 -channel_layout stereo -i &amp;#39;default&amp;#39; \ -thread_queue_size 512 -f pulse -ac 2 -channel_layout stereo -i &amp;#39;default&amp;#39; \ -filter_complex &amp;#39; [1]pad=width=in_w+10:height=in_h+10:x=5:y=5:color=black[b]; [b]scale=width=in_w*1.</description></item><item><title>find</title><link>https://hellupline.dev/docs/cheatsheets/find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/find/</guid><description>datetime locate find ./ -newermt &amp;#39;2022-11-03 17:30&amp;#39; -not -newermt &amp;#39;2022-11-03 17:30&amp;#39; find ./ -mtime +5 # modified time more than 5 days ago find ./ -mtime -5 # modified time less than 5 days ago find ./ -mtime 5 # modified time exact than 5 days ago find ./ -daystart -mtime 1 # use start of day as base instead of 24 hours print find ./ -type f -printf &amp;#39;%TY-%Tm-%Td %TT%Tz %p\n&amp;#39; # date time timezone find .</description></item><item><title>gpg</title><link>https://hellupline.dev/docs/cheatsheets/gpg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/gpg/</guid><description>list output format # sec rsa4096/xxxxxxxxxxxxxxxx 0000-00-00 [SC] # yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy # uid [ultimate] My Name &amp;lt;me@mail.com&amp;gt; # ssb rsa4096/zzzzzzzzzzzzzzzz 0000-00-00 [E] generate key gpg --full-generate-key encrypt gpg \ --output file.txt.enc \ --encrypt \ --local-user user@example.com \ --recipient another@example.com \ file.txt encrypt with passphrase gpg --output file.txt.enc --symmetric file.txt decrypt gpg --output file.txt --decrypt file.txt.enc sign file gpg --sign --armor file.txt clear sign file gpg --clear-sign file.</description></item><item><title>kubernetes</title><link>https://hellupline.dev/docs/cheatsheets/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/kubernetes/</guid><description>kubernetes plugins Dashboard Repository
Metrics Server Repository
Local Path Provisioner Repository
Proxied Dashboard
Official Cheatsheet
# Dashboard kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml # Metrics Server kubectl apply --filename https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.1/components.yaml kubectl get --output jsonpath=&amp;#39;{.status.conditions[*].message}&amp;#39; apiservice v1beta1.metrics.k8s.io # Local Path Provisioner kubectl apply --filename https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.23/deploy/local-path-storage.yaml # Proxy kubectl proxy # ServiceAccount Token kubectl -n kube-system get -o json secret \ | jq --raw-output &amp;#39;.items[] | select(.metadata.name | startswith(&amp;#34;default&amp;#34;)) | .data.token&amp;#39; \ | base64 --decode | xcopy # ServiceAccount Token EKS kubectl -n kube-system get -o json secret \ | jq --raw-output &amp;#39;.</description></item><item><title>luks</title><link>https://hellupline.dev/docs/cheatsheets/luks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/luks/</guid><description>create volume cryptsetup luksFormat --type luks2 ~/luks-volume.data --verify-passphrase inspect cryptsetup luksDump --type luks2 ~/luks-volume.data volume usage open cryptsetup open --type luks2 ~/luks-volume.data my-volume --key-file ~/luks-volume.keyfile # using keyfile cryptsetup open --type luks2 ~/luks-volume.data my-volume # using password close cryptsetup close my-volume key management add cryptsetup luksAddKey --type luks2 ~/luks-volume.data ~/luks-volume.keyfile-new --key-file ~/luks-volume.keyfile # add keyfile, using keyfile to open header cryptsetup luksAddKey --type luks2 ~/luks-volume.data ~/luks-volume.keyfile-new # add password, using password to open header cryptsetup luksAddKey --type luks2 ~/luks-volume.</description></item><item><title>mdadm</title><link>https://hellupline.dev/docs/cheatsheets/mdadm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/mdadm/</guid><description>create raid mdadm \ --verbose \ --create &amp;#39;/dev/md/kiwi-storage-v2&amp;#39; \ --name &amp;#39;kiwi-storage-v2&amp;#39; \ --level 6 \ --raid-devices 8 \ /dev/sd[c-j]1 query raid mdadm --query &amp;#39;/dev/md/kiwi-storage-v2&amp;#39; detail raid # mdadm --detail --scan &amp;gt; /etc/mdadm.conf mdadm --query &amp;#39;/dev/md/kiwi-storage-v2&amp;#39; examine raid mdadm --examine /dev/sd[c-j]1 resync progress watch -n1 cat /proc/mdstat add disk from raid mdadm --manage &amp;#39;/dev/md/kiwi-storage-v2&amp;#39; --add &amp;#39;/dev/sdc1&amp;#39; remove disk from raid mdadm --manage &amp;#39;/dev/md/kiwi-storage-v2&amp;#39; --set-faulty &amp;#39;/dev/sdc1&amp;#39; reassemple raid mdadm --assemble --run --update=resync &amp;#39;/dev/md/kiwi-storage-v2&amp;#39; /dev/sd[c-j]1 delete raid mdadm --stop &amp;#39;/dev/md/kiwi-storage-v2&amp;#39;</description></item><item><title>mysql</title><link>https://hellupline.dev/docs/cheatsheets/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/mysql/</guid><description>inspect bad queries SELECT CONCAT(&amp;#34;CALL mysql.rds_kill_query(&amp;#39;&amp;#34; , ID, &amp;#34;&amp;#39;);&amp;#34;) AS &amp;#34;run_to_kill&amp;#34;, pl.ID AS &amp;#34;id&amp;#34;, pl.USER AS &amp;#34;user&amp;#34;, pl.DB AS &amp;#34;database&amp;#34;, pl.COMMAND AS &amp;#34;command&amp;#34;, pl.STATE AS &amp;#34;state&amp;#34;, trx.trx_operation_state AS &amp;#34;operation_state&amp;#34;, trx.trx_isolation_level AS &amp;#34;isolation_level&amp;#34;, pl.TIME / 60 AS &amp;#34;time_minute&amp;#34;, pl.INFO AS &amp;#34;text&amp;#34; FROM information_schema.PROCESSLIST AS pl RIGHT OUTER JOIN information_schema.INNODB_TRX AS trx ON pl.ID = trx.trx_mysql_thread_id WHERE pl.COMMAND NOT IN (&amp;#39;Sleep&amp;#39;, &amp;#39;Connect&amp;#39;, &amp;#39;Binlog Dump&amp;#39;) ORDER BY pl.TIME DESC; allow kill process on rds GRANT EXECUTE ON PROCEDURE `mysql`.</description></item><item><title>network</title><link>https://hellupline.dev/docs/cheatsheets/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/network/</guid><description>locate servers in network nmap -p22 --open &amp;#39;192.168.100.0/24&amp;#39; # nmap &amp;#39;192.168.100.0/24&amp;#39; list open ports lsof -nP -i&amp;#39;TCP:22&amp;#39; -i&amp;#39;TCP:1313&amp;#39; -s&amp;#39;TCP:LISTEN&amp;#39; # lsof -nP -i&amp;#39;TCP&amp;#39; -s&amp;#39;TCP:LISTEN&amp;#39; list active connections lsof -nP -i&amp;#39;TCP&amp;#39; -s&amp;#39;TCP:ESTABLISHED&amp;#39; dns query records # dig @1.1.1.1 +trace example.com AAAA dig @1.1.1.1 +short example.com AAAA curl debug requests curl \ --silent --show-error \ --fail --fail-early \ --compressed --location \ --create-dirs \ --dump-header - --output - \ --write-out &amp;#39; time_namelookup: %{time_namelookup} time_connect: %{time_connect} time_appconnect: %{time_appconnect} time_pretransfer: %{time_pretransfer} time_redirect: %{time_redirect} time_starttransfer: %{time_starttransfer} ---------- time_total: %{time_total} &amp;#39; \ --request GET --url https://example.</description></item><item><title>nginx</title><link>https://hellupline.dev/docs/cheatsheets/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/nginx/</guid><description>run with configuration files docker run --rm -it --name=static-site \ --volume &amp;#34;${PWD}/conf.d:/etc/nginx/conf.d/&amp;#34; \ --volume &amp;#34;${PWD}/public:/usr/share/nginx/html&amp;#34; \ --publish 8080:80 \ --workdir /usr/share/nginx/html \ nginx</description></item><item><title>openssl</title><link>https://hellupline.dev/docs/cheatsheets/openssl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/openssl/</guid><description>ssl pinning key openssl s_client -servername hellupline.dev -connect hellupline.dev:443 -showcerts &amp;lt; /dev/null 2&amp;gt; /dev/null \ | openssl x509 -pubkey -noout \ | openssl pkey -pubin -outform der \ | openssl dgst -sha256 -binary \ | openssl enc -base64</description></item><item><title>postgres</title><link>https://hellupline.dev/docs/cheatsheets/postgres/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/postgres/</guid><description>Check long running transactions SELECT FORMAT(&amp;#39;SELECTR pg_terminate_backend(%s)&amp;#39;, pid) AS &amp;#34;run to kill&amp;#34;, pid AS &amp;#34;process ID&amp;#34;, usename AS &amp;#34;username&amp;#34;, client_addr AS &amp;#34;source ip&amp;#34;, EXTRACT(EPOCH FROM (DATE_TRUNC(&amp;#39;second&amp;#39;, now() - pg_stat_activity.query_start))) AS &amp;#34;duration&amp;#34;, state as &amp;#34;state&amp;#34;, TRIM(LEADING E&amp;#39;\n&amp;#39; FROM query) AS &amp;#34;query&amp;#34; -- Adjusts query visualization in some softwares FROM pg_stat_activity WHERE state != &amp;#39;idle&amp;#39; ORDER BY duration DESC; show where a user has permissions WITH tables AS ( SELECT catalog_name AS &amp;#34;catalog_name&amp;#34;, schema_name AS &amp;#34;schema_name&amp;#34;, tablename AS &amp;#34;table_name&amp;#34; FROM information_schema.</description></item><item><title>python</title><link>https://hellupline.dev/docs/cheatsheets/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/python/</guid><description>poetry install and use python3 -m pip install --upgrade --user poetry poetry add boto3 poetry shell lock and lambda-layer poetry export --format requirements.txt --output ./layer/requirements.txt python3 -m pip install \ --force-reinstall \ --no-compile \ --no-deps \ --target &amp;#39;./layer/python&amp;#39; \ --requirement &amp;#39;./layer/requirements.txt&amp;#39; pip docker poetry export --format requirements.txt --output ./layer/requirements.txt docker run \ --name python-pip \ --rm \ --interactive=true \ --tty=true \ --volume &amp;#34;${PWD}:/application&amp;#34; \ --workdir &amp;#39;/application&amp;#39; \ python:3.</description></item><item><title>redshift</title><link>https://hellupline.dev/docs/cheatsheets/redshift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/redshift/</guid><description>create user CREATE USER &amp;#34;example_user&amp;#34; WITH PASSWORD &amp;#39;mysecretpassword&amp;#39;; create readonly group and add user CREATE GROUP &amp;#34;example_group_ro&amp;#34;; GRANT USAGE ON SCHEMA &amp;#34;example_schema&amp;#34; TO GROUP &amp;#34;example_group_ro&amp;#34;; ALTER DEFAULT PRIVILEGES IN SCHEMA &amp;#34;example_schema&amp;#34; GRANT SELECT ON TABLES TO GROUP &amp;#34;example_group_ro&amp;#34;; GRANT SELECT ON ALL TABLES IN SCHEMA &amp;#34;example_schema&amp;#34; TO GROUP &amp;#34;example_group_ro&amp;#34;; ALTER GROUP &amp;#34;example_group_ro&amp;#34; ADD USER &amp;#34;my_user&amp;#34; locate schemas without readonly group SELECT n.nspname FROM pg_namespace AS n WHERE n.nspname NOT IN ( &amp;#39;pg_internal&amp;#39;, &amp;#39;pg_toast&amp;#39;, &amp;#39;pg_catalog&amp;#39;, &amp;#39;admin&amp;#39; ) AND n.</description></item><item><title>rsync</title><link>https://hellupline.dev/docs/cheatsheets/rsync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/rsync/</guid><description>base rsync rsync \ --verbose \ --info=&amp;#39;progress2,stats3&amp;#39; \ --no-inc-recursive \ --partial \ --archive \ --hard-links \ --perms \ --xattrs \ --acls \ --one-file-system \ --exclude &amp;#39;stuff/_data&amp;#39; \ -- \ &amp;#39;SOURCE_OBJECT_1&amp;#39; \ &amp;#39;SOURCE_OBJECT_2&amp;#39; \ &amp;#39;SOURCE_OBJECT_3&amp;#39; \ &amp;#39;TARGET&amp;#39; using ssh rsync \ --verbose \ --info=&amp;#39;progress2,stats3&amp;#39; \ --no-inc-recursive \ --partial \ --archive \ --hard-links \ --perms \ --xattrs \ --acls \ --one-file-system \ --rsh=&amp;#39;ssh -T -c chacha20-poly1305@openssh.</description></item><item><title>ssh</title><link>https://hellupline.dev/docs/cheatsheets/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/ssh/</guid><description>generate key ssh-keygen -t rsa -b 4096 -C &amp;#34;me@mail.com&amp;#34; shell through bastion ssh -J me@reachable.com me@unreacheable.com reach server behind bastion ssh -Nnf -L localhost:8080:remote.example.com:5000 me@example.com # cancel forward ssh -O cancel -L localhost:8080:remote.example.com:5000 me@example.com # close opportunistic master ssh -O exit me@example.com reach localhost from bastion ssh -Nnf -R localhost:8080:remote.example.com:5000 me@example.com # cancel forward ssh -O cancel -R localhost:8080:remote.example.com:5000 me@example.com # close opportunistic master ssh -O exit me@example.com create a socks proxy ssh -Nnf -D 8080 me@example.</description></item><item><title>sysadmin</title><link>https://hellupline.dev/docs/cheatsheets/sysadmin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/sysadmin/</guid><description>system stats install: sysstat net-tools iotop iftop htop
process stats pidstat -p PID # pidstat -p ALL pidstat -p PID INTERVAL pidstat -p PID INTERVAL QUANTITY pidstat -C NAME # by name # custom stats pidstat -p PID -r # memory pidstat -p PID -u # cpu pidstat -p PID -d # io # formatting pidstat -p PID -t # tree pidstat -p PID -h # horizontal ( for export ) network stats netstat --tcp --udp --listening --program --numeric # netstat -tulpn monitoring tui iotop iftop htop routing table netstat --route --numeric # netstat -rn services manage systemctl enable --now SERVICE # chkconfig SERVICE on systemctl disable --now SERVICE # chkconfig SERVICE off systemctl is-enabled SERVICE # chkconfig SERVICE systemctl daemon-reload # chkconfig SERVICE --add systemctl start SERVICE # service SERVICE start systemctl stop SERVICE # service SERVICE stop systemctl status SERVICE # service SERVICE status systemctl restart SERVICE # service SERVICE restart systemctl reload SERVICE # service SERVICE reload list systemctl list-units --type=service --state=running --all # service --status-all logs journalctl --follow --since=today # tail --follow /var/log/{messages,syslog} journalctl --dmesg journalctl --unit SERVICE journalctl --grep &amp;#39;fail|error|fatal&amp;#39; journalctl --output json journalctl --list-boots journalctl --boot BOOT_ID process memory ps -C &amp;#39;firefox&amp;#39; -O rss \ | awk &amp;#39; { count ++; sum += $2 } END { count -- print &amp;#34;Number of processes:\t\t\t&amp;#34;, count print &amp;#34;Average memory usage per process:\t&amp;#34;, sum/1024/count, &amp;#34;MB&amp;#34; print &amp;#34;Total memory usage:\t\t\t&amp;#34;, sum/1024, &amp;#34;MB&amp;#34; } &amp;#39;</description></item><item><title>utils</title><link>https://hellupline.dev/docs/cheatsheets/utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/docs/cheatsheets/utils/</guid><description>column sed &amp;#39;s/#.*//&amp;#39; /etc/fstab | column --table --table-columns=&amp;#39;SOURCE,TARGET,TYPE&amp;#39; --table-hide=&amp;#39;-&amp;#39; cat /etc/passwd \ | sort \ --field-separator=&amp;#39;:&amp;#39; \ --key=&amp;#39;3,3n&amp;#39; \ --key=&amp;#39;4,4n&amp;#39; \ | column \ --separator=&amp;#39;:&amp;#39; \ --table \ --table-name=&amp;#39;etc-passwd&amp;#39; \ --table-columns=&amp;#39;USERNAME,PASS,UID,GID,NAME,HOMEDIR,SHELL&amp;#39; \ --table-right=&amp;#39;UID,GID&amp;#39; \ --table-hide=&amp;#39;PASS&amp;#39; \ | less --chop-long-lines --RAW-CONTROL-CHARS df --print-type --human-readable \ | sed \ --regexp-extended \ --expression=&amp;#39;s#\s+# #g&amp;#39; \ --expression=&amp;#39;1d&amp;#39; \ | sort \ --field-separator=&amp;#39; &amp;#39; \ --key &amp;#39;3,3h&amp;#39; \ --key=&amp;#39;4,4h&amp;#39; \ --key=&amp;#39;5,5h&amp;#39; \ --key=&amp;#39;7,7&amp;#39; \ --key=&amp;#39;2,2&amp;#39; \ --key=&amp;#39;1,1&amp;#39; \ | column \ --table \ --table-columns=&amp;#39;Filesystem,Type,Size,Used,Avail,Use%,Mounted on&amp;#39; \ | less --chop-long-lines --RAW-CONTROL-CHARS # tree mode, parent field 2, object id field 1, tree object field 3 echo -e &amp;#39;1 0 A\n2 1 AA\n3 1 AB\n4 2 AAA\n5 2 AAB&amp;#39; | column --tree-id 1 --tree-parent 2 --tree 3 # 1 0 A # 2 1 ├─AA # 4 2 │ ├─AAA # 5 2 │ └─AAB # 3 1 └─AB date # RFC-3339 date --date=&amp;#39;1991-01-22 18:00:00 -0300&amp;#39; date --rfc-3339=seconds # Timestamp date --date=&amp;#39;@664578000&amp;#39; date &amp;#39;+%s&amp;#39; # Relative date --date=&amp;#34;next Friday&amp;#34; date --date=&amp;#34;2 days ago&amp;#34; math in shell DAYS=15 echo &amp;#34;scale=2; days=${DAYS}; hours=24; minutes=60; seconds=60; result = days * hours * minutes * seconds; result&amp;#34; | bc last exit status echo ${?</description></item></channel></rss>
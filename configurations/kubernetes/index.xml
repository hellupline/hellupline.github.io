<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on hellupline notes</title><link>https://hellupline.dev/configurations/kubernetes/</link><description>Recent content in kubernetes on hellupline notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/configurations/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>configmap</title><link>https://hellupline.dev/configurations/kubernetes/configmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/configmap/</guid><description> Download --- apiVersion: v1 kind: ConfigMap metadata: labels: {app: my-app} name: my-app-config namespace: my-namespace data: CONFIG_ENV: my-config-env-value CONFIG_FILE: | { &amp;#34;key_01&amp;#34;: &amp;#34;value_02&amp;#34;, &amp;#34;key_02&amp;#34;: &amp;#34;value_02&amp;#34;, }</description></item><item><title>cronjob</title><link>https://hellupline.dev/configurations/kubernetes/cronjob/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/cronjob/</guid><description> Download --- apiVersion: batch/v1beta1 kind: CronJob metadata: labels: {app: my-cronjob} name: my-cronjob namespace: my-namespace spec: schedule: &amp;#34;* * * * *&amp;#34; concurrencyPolicy: Forbid jobTemplate: spec: template: metadata: {labels: {app: my-cronjob}} spec: restartPolicy: Never containers: - name: my-cronjob image: alpine imagePullPolicy: Always command: [&amp;#34;echo&amp;#34;, &amp;#34;hello&amp;#34;, &amp;#34;nurse&amp;#34;]</description></item><item><title>daemonset</title><link>https://hellupline.dev/configurations/kubernetes/daemonset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/daemonset/</guid><description> Download --- apiVersion: apps/v1 kind: DaemonSet metadata: labels: {app: my-app} name: my-app namespace: my-namespace spec: selector: {matchLabels: {app: my-app}} template: metadata: {labels: {app: my-app}} spec: containers: - name: my-app image: nginx</description></item><item><title>deployment</title><link>https://hellupline.dev/configurations/kubernetes/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/deployment/</guid><description> Download --- apiVersion: apps/v1 kind: Deployment metadata: labels: {app: my-app} name: my-app namespace: my-namespace spec: replicas: 3 minReadySeconds: 30 strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 0 maxSurge: 1 selector: {matchLabels: {app: my-app}} template: metadata: {labels: {app: my-app}} spec: containers: - name: my-app image: nginx</description></item><item><title>hpa</title><link>https://hellupline.dev/configurations/kubernetes/hpa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/hpa/</guid><description> Download --- apiVersion: autoscaling/v2beta2 kind: HorizontalPodAutoscaler metadata: labels: {app: my-app} name: my-app namespace: my-namespace spec: scaleTargetRef: {apiVersion: apps/v1, kind: Deployment, name: my-app} minReplicas: 2 maxReplicas: 10 metrics: - type: Resource resource: name: cpu target: {type: Utilization, averageUtilization: 50} - type: Object object: describedObject: {apiVersion: networking.k8s.io/v1beta1, kind: Ingress, name: my-app} metric: {name: requests-per-second} target: {kind: Value, value: 60} - type: Pods pods: metric: {name: packets-per-second} target: {type: AverageValue, averageValue: 1k}</description></item><item><title>ingress</title><link>https://hellupline.dev/configurations/kubernetes/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/ingress/</guid><description>Download --- apiVersion: extensions/v1beta1 kind: Ingress metadata: labels: {app: my-app} name: my-app namespace: production spec: tls: - secretName: my-domain-com-tls hosts: - my-domain.com rules: - host: my-domain.com http: paths: - {path: &amp;#39;/my-other-app&amp;#39;, pathType: Prefix, backend: {service: {name: my-other-app, port: {name: http}}}} - {path: &amp;#39;/&amp;#39;, pathType: Prefix, backend: {service: {name: my-app, port: {name: http}}}} # handle other domains, but without tls - http: paths: - {path: &amp;#39;/my-other-app&amp;#39;, pathType: Prefix, backend: {service: {name: my-other-app, port: {name: http}}}} - {path: &amp;#39;/&amp;#39;, pathType: Prefix, backend: {service: {name: my-app, port: {name: http}}}} --- apiVersion: v1 kind: Secret metadata: annotations: kubernetes.</description></item><item><title>job</title><link>https://hellupline.dev/configurations/kubernetes/job/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/job/</guid><description> Download --- apiVersion: batch/v1 kind: Job metadata: labels: {app: my-job} name: my-job namespace: my-namespace spec: template: metadata: {labels: {app: my-job}} spec: restartPolicy: Never containers: - name: my-job image: alpine args: [&amp;#34;echo&amp;#34;, &amp;#34;hello nurse&amp;#34;]</description></item><item><title>namespace</title><link>https://hellupline.dev/configurations/kubernetes/namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/namespace/</guid><description> Download --- apiVersion: v1 kind: Namespace metadata: name: my-namespace labels: name: my-namespace</description></item><item><title>pod</title><link>https://hellupline.dev/configurations/kubernetes/pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/pod/</guid><description>Download --- apiVersion: v1 kind: Pod metadata: labels: {app: my-app} name: my-app namespace: my-namespace spec: affinity: # repel same pods in node podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - topologyKey: kubernetes.io/hostname labelSelector: matchExpressions: - {key: app, operator: In, values: [my-app]} # attract cache pods podAffinity: preferredDuringSchedulingIgnoredDuringExecution: - topologyKey: kubernetes.io/hostname labelSelector: matchExpressions: - {key: app, operator: In, values: [my-app-cache]} # resist node taint tags tolerations: - {key: role, operator: Equal, value: worker, effect: NoSchedule} - {key: role, operator: Equal, value: worker, effect: NoExecute} restartPolicy: Always containers: - name: my-app imagePullPolicy: Always image: nginx cmd: [&amp;#34;sh&amp;#34;, &amp;#34;-c&amp;#34;] args: [&amp;#34;echo&amp;#34;, &amp;#34;123&amp;#34;] # pod environment lifecycle: postStart: {exec: {command: [&amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;touch /tmp/hello&amp;#34;]}} preStop: {exec: {command: [&amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;echo Hello from the preSop handler &amp;gt; /tmp/hello&amp;#34;]}} volumeMounts: - {name: secret-files, mountPath: &amp;#34;/my-app/secret/&amp;#34;, readOnly: true} - {name: config-files, mountPath: &amp;#34;/my-app/config/&amp;#34;, readOnly: true} - {name: volume-files, mountPath: &amp;#34;/my-app/volume/&amp;#34;, readOnly: false} - {name: cached-files, mountPath: &amp;#34;/my-app/cached/&amp;#34;, readOnly: false} ports: - {name: http, containerPort: 80, hostPort: 80} resources: requests: {memory: &amp;#34;32Mi&amp;#34;, cpu: &amp;#34;50m&amp;#34;} limits: {memory: &amp;#34;256Mi&amp;#34;, cpu: &amp;#34;200m&amp;#34;} envFrom: - secretRef: {name: my-app-secret} - configMapRef: {name: my-app-config} env: - {name: SECRET_ENV, valueFrom: {secretKeyRef: {name: my-app-secret, key: SECRET_ENV}}} - {name: CONFIG_ENV, valueFrom: {configMapKeyRef: {name: my-app-config, key: CONFIG_ENV}}} - {name: ENV_NAME, value: &amp;#34;ENV_VALUE&amp;#34;} - {name: POD_NAMESPACE, valueFrom: {fieldRef: {fieldPath: metadata.</description></item><item><title>private-registry-credentials</title><link>https://hellupline.dev/configurations/kubernetes/private-registry-credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/private-registry-credentials/</guid><description> Download --- apiVersion: v1 kind: Secret metadata: name: gitlab-registry-secrets namespace: my-namespace type: kubernetes.io/dockerconfigjson stringData: .dockerconfigjson: &amp;#39;{&amp;#34;auths&amp;#34;:{&amp;#34;https://registry.gitlab.com&amp;#34;:{&amp;#34;username&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;&amp;#34;}}}&amp;#39; --- apiVersion: v1 kind: ServiceAccount metadata: name: default namespace: my-namespace imagePullSecrets: - name: gitlab-registry-secrets</description></item><item><title>rbac-aggregated-maintenance</title><link>https://hellupline.dev/configurations/kubernetes/rbac-aggregated-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/rbac-aggregated-maintenance/</guid><description>Download --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: deployment--maintenance aggregationRule: clusterRoleSelectors: - matchLabels: deployment.rbac.example.com/aggregate-to-create: &amp;#34;true&amp;#34; deployment.rbac.example.com/aggregate-to-read: &amp;#34;true&amp;#34; deployment.rbac.example.com/aggregate-to-update: &amp;#34;true&amp;#34; rules: [] # Rules are automatically filled in by the controller manager. --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: deployment--create labels: deployment.rbac.example.com/aggregate-to-create: &amp;#34;true&amp;#34; # These rules will be added to the &amp;#34;monitoring&amp;#34; role. rules: - apiGroups: [&amp;#34;&amp;#34;] resources: [&amp;#34;services&amp;#34;, &amp;#34;endpoints&amp;#34;, &amp;#34;pods&amp;#34;] verbs: [&amp;#34;create&amp;#34;] - apiGroups: [&amp;#34;apps&amp;#34;, &amp;#34;extensions&amp;#34;] resources: [&amp;#34;deployments&amp;#34;] verbs: [&amp;#34;create&amp;#34;] --- apiVersion: rbac.</description></item><item><title>rbac-cluster-full-access</title><link>https://hellupline.dev/configurations/kubernetes/rbac-cluster-full-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/rbac-cluster-full-access/</guid><description> Download --- apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRole metadata: name: my-cluster-role--full-access rules: - apiGroups: [&amp;#34;&amp;#34;, &amp;#34;extensions&amp;#34;, &amp;#34;apps&amp;#34;, &amp;#34;batch&amp;#34;] resources: [&amp;#34;*&amp;#34;] verbs: [&amp;#34;*&amp;#34;] --- apiVersion: v1 kind: ServiceAccount metadata: name: my-service-account namespace: my-namespace --- apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: my-cluster-role-binding--full-access roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: my-cluster-role--full-access subjects: - apiGroup: rbac.authorization.k8s.io kind: ServiceAccount name: my-service-account namespace: my-namespace - apiGroup: rbac.authorization.k8s.io kind: User name: my-user - apiGroup: rbac.authorization.k8s.io kind: Group name: my-group</description></item><item><title>rbac-cluster-read-only</title><link>https://hellupline.dev/configurations/kubernetes/rbac-cluster-read-only/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/rbac-cluster-read-only/</guid><description> Download --- kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: my-cluster-role--read-only rules: - apiGroups: [&amp;#34;&amp;#34;, &amp;#34;extensions&amp;#34;, &amp;#34;apps&amp;#34;, &amp;#34;batch&amp;#34;] resources: [&amp;#34;*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] --- apiVersion: v1 kind: ServiceAccount metadata: name: my-service-account namespace: my-namespace --- kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: my-cluster-role-binding--read-only roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: my-cluster-role--read-only subjects: - apiGroup: rbac.authorization.k8s.io kind: ServiceAccount name: my-service-account namespace: my-namespace - apiGroup: rbac.authorization.k8s.io kind: User name: my-user - apiGroup: rbac.authorization.k8s.io kind: Group name: my-group</description></item><item><title>rbac-namespace-full-access</title><link>https://hellupline.dev/configurations/kubernetes/rbac-namespace-full-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/rbac-namespace-full-access/</guid><description>Download --- kind: Role apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: my-namespace-role--full-access namespace: my-namespace rules: - apiGroups: [&amp;#34;&amp;#34;, &amp;#34;extensions&amp;#34;, &amp;#34;apps&amp;#34;, &amp;#34;batch&amp;#34;] resources: [&amp;#34;*&amp;#34;] verbs: [&amp;#34;*&amp;#34;] --- apiVersion: v1 kind: ServiceAccount metadata: name: my-service-account namespace: my-namespace --- kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: my-namespace-role-binding--full-access namespace: my-namespace roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: my-namespace-role--full-access subjects: - apiGroup: rbac.authorization.k8s.io kind: ServiceAccount name: my-service-account namespace: my-namespace - apiGroup: rbac.authorization.k8s.io kind: User name: my-user - apiGroup: rbac.</description></item><item><title>rbac-namespace-read-only</title><link>https://hellupline.dev/configurations/kubernetes/rbac-namespace-read-only/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/rbac-namespace-read-only/</guid><description>Download --- kind: Role apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: my-namespace-role--read-only namespace: my-namespace rules: - apiGroups: [&amp;#34;&amp;#34;, &amp;#34;extensions&amp;#34;, &amp;#34;apps&amp;#34;, &amp;#34;batch&amp;#34;] resources: [&amp;#34;*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;list&amp;#34;, &amp;#34;watch&amp;#34;] --- apiVersion: v1 kind: ServiceAccount metadata: name: my-service-account namespace: my-namespace --- kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: my-namespace-role-binding--read-only namespace: my-namespace roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: my-namespace-role--read-only subjects: - apiGroup: rbac.authorization.k8s.io kind: ServiceAccount name: my-service-account namespace: my-namespace - apiGroup: rbac.authorization.k8s.io kind: User name: my-user - apiGroup: rbac.</description></item><item><title>secret</title><link>https://hellupline.dev/configurations/kubernetes/secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/secret/</guid><description> Download --- apiVersion: v1 kind: Secret metadata: labels: {app: my-app} name: my-app-secret namespace: my-namespace type: Opaque stringData: SECRET_ENV: my-secret-env-value SECRET_FILE: | { &amp;#34;key_01&amp;#34;: &amp;#34;value_02&amp;#34;, &amp;#34;key_02&amp;#34;: &amp;#34;value_02&amp;#34;, }</description></item><item><title>service</title><link>https://hellupline.dev/configurations/kubernetes/service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/service/</guid><description> Download --- apiVersion: v1 kind: Service metadata: labels: {app: my-app} name: my-app-service namespace: my-namespace spec: type: ClusterIP externalTrafficPolicy: Local selector: {app: my-app} ports: - {name: http, protocol: TCP, port: 80, targetPort: 80}</description></item><item><title>service-dns</title><link>https://hellupline.dev/configurations/kubernetes/service-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/service-dns/</guid><description> Download --- apiVersion: v1 kind: Service metadata: labels: {app: my-app} name: my-app-service namespace: my-namespace spec: type: ExternalName externalName: my.database.example.com</description></item><item><title>service-endpoint</title><link>https://hellupline.dev/configurations/kubernetes/service-endpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/service-endpoint/</guid><description> Download --- apiVersion: v1 kind: Service metadata: labels: {app: my-app} name: my-app-service namespace: my-namespace spec: ports: - {name: http, protocol: TCP, port: 80, targetPort: 80} --- apiVersion: v1 kind: Endpoints metadata: labels: {app: my-app} name: my-app-service namespace: my-namespace subsets: - addresses: - ip: 192.0.2.42 ports: - port: 9376</description></item><item><title>statefulset</title><link>https://hellupline.dev/configurations/kubernetes/statefulset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/statefulset/</guid><description> Download --- apiVersion: apps/v1 kind: StatefulSet metadata: labels: {app: my-app} name: my-app namespace: my-namespace spec: selector: {matchLabels: {app: my-app}} replicas: 3 serviceName: my-app template: metadata: {labels: {app: my-app}} spec: containers: - name: my-app image: nginx volumeMounts: - {name: my-app-data, mountPath: &amp;#34;/usr/share/nginx/html&amp;#34;} volumeClaimTemplates: - metadata: {name: my-app-data} spec: selector: {matchLabels: {app: my-app}} resources: {requests: {storage: 1Gi}} accessModes: [ReadWriteOnce]</description></item><item><title>volume-cloud</title><link>https://hellupline.dev/configurations/kubernetes/volume-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/volume-cloud/</guid><description> Download --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: my-pvc spec: resources: {requests: {storage: 3Gi}} accessModes: [ReadWriteOnce]</description></item><item><title>volume-local-disk</title><link>https://hellupline.dev/configurations/kubernetes/volume-local-disk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/configurations/kubernetes/volume-local-disk/</guid><description> Download --- apiVersion: v1 kind: PersistentVolume metadata: labels: {app: my-app} name: my-pv namespace: my-namespace spec: storageClassName: manual hostPath: {path: &amp;#34;/opt/volumes/my-pv&amp;#34;} capacity: {storage: 10Gi} accessModes: [ReadWriteOnce] --- apiVersion: v1 kind: PersistentVolumeClaim metadata: labels: {app: my-app} name: my-pvc namespace: my-namespace spec: storageClassName: manual selector: {matchLabels: {type: my-app}} resources: requests: {storage: 10Gi} accessModes: [ReadWriteOnce]</description></item></channel></rss>
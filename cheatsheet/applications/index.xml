<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>applications on HellUpLine Haematite Stuffs</title><link>https://hellupline.dev/cheatsheet/applications/</link><description>Recent content in applications on HellUpLine Haematite Stuffs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/cheatsheet/applications/index.xml" rel="self" type="application/rss+xml"/><item><title>kubernetes</title><link>https://hellupline.dev/cheatsheet/applications/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/applications/kubernetes/</guid><description>kubernetes plugins Dashboard Repository
Metrics Server Repository
Local Path Provisioner Repository
Proxied Dashboard
Official Cheatsheet
# Dashboard kubectl apply --filename https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta3/aio/deploy/recommended.yaml # Metrics Server kubectl apply \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/aggregated-metrics-reader.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/auth-delegator.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/auth-reader.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/metrics-apiservice.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/metrics-server-deployment.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/metrics-server-service.yaml \ --filename https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/v0.3.3/deploy/1.8%2B/resource-reader.yaml kubectl get --output jsonpath=&amp;#39;{.status.conditions[*].message}&amp;#39; apiservice v1beta1.metrics.k8s.io # Local Path Provisioner kubectl apply --filename https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.9/deploy/local-path-storage.yaml # ServiceAccount Token kubectl -n kube-system get -o json secret \ | jq --raw-output &amp;#39;.</description></item><item><title>docker</title><link>https://hellupline.dev/cheatsheet/applications/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/applications/docker/</guid><description>run container docker container run --rm --interactive --tty --name=stuff \ --volume=&amp;#34;${PWD}:/data&amp;#34; \ --network=&amp;#34;my_net&amp;#34; \ --publish=&amp;#34;8080:80&amp;#34; \ --env=&amp;#34;CONFIG_VALUE=my-app&amp;#34; \ --env-file=&amp;#34;prod.env&amp;#34; \ --workdir=&amp;#34;/data&amp;#34; \ alpine build docker build --tag my_registry/my_app:my_version --file ./Dockerfile ./ docker push my_registry/my_app:my_version docker tag my_registry/my_app:my_version my_registry/my_app:latest docker push my_registry/my_app:latest multi-stage dockerfile FROMgolang:1.13 as buildWORKDIR/appCOPY ./ ./RUN go build -o my_appFROMalpine:latestRUN apk --no-cache add ca-certificatesWORKDIR/appCOPY --from=builder /app/my_app ./CMD [&amp;#34;./my_app&amp;#34;]volumes docker volume create my_volume docker volume ls docker volume rm my_volume network docker network create my_net docker network ls docker network rm my_net running containers docker container ls docker container logs my_container docker container exec -it my_container my_command docker container attach my_container system docker system events docker system info docker system prune --volumes --all login to aws ecr $(aws ecr get-login --no-include-email)</description></item><item><title>nginx</title><link>https://hellupline.dev/cheatsheet/applications/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/applications/nginx/</guid><description>run a simple static site with nginx and docker docker run --rm -it --name=static-site \ --volume &amp;#34;${PWD}/public:/usr/share/nginx/html&amp;#34; \ --publish 8080:80 \ --workdir /usr/share/nginx/html \ nginx run with configuration files docker run --rm -it --name=static-site \ --volume &amp;#34;${PWD}/conf.d:/etc/nginx/conf.d/&amp;#34; \ --volume &amp;#34;${PWD}/public:/usr/share/nginx/html&amp;#34; \ --publish 8080:80 \ --workdir /usr/share/nginx/html \ nginx</description></item><item><title>mysql</title><link>https://hellupline.dev/cheatsheet/applications/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/applications/mysql/</guid><description>inspect bad queries SELECT CONCAT(&amp;#34;CALL mysql.rds_kill_query(&amp;#39;&amp;#34; , ID, &amp;#34;&amp;#39;);&amp;#34;) as run_to_kill, ID, USER, DB, STATE, TIME, INFO FROM information_schema.processlist WHERE COMMAND NOT IN (&amp;#39;Sleep&amp;#39;, &amp;#39;Connect&amp;#39;, &amp;#39;Binlog Dump&amp;#39;) AND USER NOT IN (&amp;#39;system user&amp;#39;) AND SUBSTR(USER, 1, 4) != &amp;#39;app_&amp;#39; ORDER BY TIME DESC; create user CREATE USER &amp;#39;user&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;PASSWORD&amp;#39;; GRANT SELECT on DATABASE.* TO &amp;#39;user&amp;#39;@&amp;#39;%&amp;#39;; inspect user permissions SHOW GRANTS FOR &amp;#39;user&amp;#39;@&amp;#39;%&amp;#39;; SELECT * FROM information_schema.user_privileges WHERE PRIVILEGE_TYPE NOT IN ( &amp;#39;USAGE&amp;#39;, &amp;#39;SELECT&amp;#39; ) AND GRANTEE NOT IN ( &amp;#34;&amp;#39;rdsadmin&amp;#39;@&amp;#39;localhost&amp;#39;&amp;#34;, &amp;#34;&amp;#39;rdsrepladmin&amp;#39;@&amp;#39;%&amp;#39;&amp;#34; ) allow kill process on rds GRANT EXECUTE ON PROCEDURE `mysql`.</description></item><item><title>postgresql</title><link>https://hellupline.dev/cheatsheet/applications/postgresql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/applications/postgresql/</guid><description>Check long running transactions SELECT FORMAT(&amp;#39;SELECTR pg_terminate_backend(%s)&amp;#39;, pid) AS &amp;#34;run to kill&amp;#34;, pid AS &amp;#34;process ID&amp;#34;, usename AS &amp;#34;username&amp;#34;, client_addr AS &amp;#34;source ip&amp;#34;, EXTRACT(EPOCH FROM (DATE_TRUNC(&amp;#39;second&amp;#39;, now() - pg_stat_activity.query_start))) AS &amp;#34;duration&amp;#34;, state as &amp;#34;state&amp;#34;, TRIM(LEADING E&amp;#39;\n&amp;#39; FROM query) AS &amp;#34;query&amp;#34; -- Adjusts query visualization in some softwares FROM pg_stat_activity WHERE state != &amp;#39;idle&amp;#39; ORDER BY duration DESC; show where a user has permissions WITH tables AS ( SELECT catalog_name AS &amp;#34;catalog_name&amp;#34;, schema_name AS &amp;#34;schema_name&amp;#34;, tablename AS &amp;#34;table_name&amp;#34; FROM information_schema.</description></item><item><title>redshift</title><link>https://hellupline.dev/cheatsheet/applications/redshift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/applications/redshift/</guid><description>create user CREATE USER &amp;#34;example_user&amp;#34; WITH PASSWORD &amp;#39;mysecretpassword&amp;#39;; create readonly group and add user CREATE GROUP &amp;#34;example_group_ro&amp;#34;; GRANT USAGE ON SCHEMA &amp;#34;example_schema&amp;#34; TO GROUP &amp;#34;example_group_ro&amp;#34;; ALTER DEFAULT PRIVILEGES IN SCHEMA &amp;#34;example_schema&amp;#34; GRANT SELECT ON TABLES TO GROUP &amp;#34;example_group_ro&amp;#34;; GRANT SELECT ON ALL TABLES IN SCHEMA &amp;#34;example_schema&amp;#34; TO GROUP &amp;#34;example_group_ro&amp;#34;; ALTER GROUP &amp;#34;example_group_ro&amp;#34; ADD USER &amp;#34;my_user&amp;#34; locate schemas without _ro group SELECT n.nspname FROM pg_namespace AS n WHERE n.nspname NOT IN ( &amp;#39;pg_internal&amp;#39;, &amp;#39;pg_toast&amp;#39;, &amp;#39;pg_catalog&amp;#39;, &amp;#39;admin&amp;#39; ) AND n.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>commands on HellUpLine Stuffs</title><link>https://hellupline.dev/cheatsheet/commands/</link><description>Recent content in commands on HellUpLine Stuffs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/cheatsheet/commands/index.xml" rel="self" type="application/rss+xml"/><item><title>sysadmin</title><link>https://hellupline.dev/cheatsheet/commands/sysadmin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/sysadmin/</guid><description>system stats install: sysstat net-tools iotop iftop htop
process stats pidstat -p PID # pidstat -p ALL pidstat -p PID INTERVAL pidstat -p PID INTERVAL QUANTITY pidstat -C NAME # by name # custom stats pidstat -p PID -r # memory pidstat -p PID -u # cpu pidstat -p PID -d # io # formatting pidstat -p PID -t # tree pidstat -p PID -h # horizontal ( for export ) network stats netstat --tcp --udp --listening --program --numeric # netstat -tulpn monitoring tui iotop iftop htop routing table netstat --route --numeric # netstat -rn services manage systemctl enable --now SERVICE # chkconfig SERVICE on systemctl disable --now SERVICE # chkconfig SERVICE off systemctl is-enabled SERVICE # chkconfig SERVICE systemctl daemon-reload # chkconfig SERVICE --add systemctl start SERVICE # service SERVICE start systemctl stop SERVICE # service SERVICE stop systemctl status SERVICE # service SERVICE status systemctl restart SERVICE # service SERVICE restart systemctl reload SERVICE # service SERVICE reload list systemctl list-units --type=service --state=running --all # service --status-all logs journalctl --follow --since=today # tail --follow /var/log/{messages,syslog} journalctl --dmesg journalctl --unit SERVICE journalctl --list-boots journalctl --boot BOOT_ID</description></item><item><title>utils</title><link>https://hellupline.dev/cheatsheet/commands/utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/utils/</guid><description>fuck you and everyone around you alarm&amp;hellip; { [ -s ~/.fuckyou.m4a ] || wget -O ~/.fuckyou.m4a https://hellupline.dev/uploads/alarms/c5Ul18ZmBao.m4a; } &amp;amp;&amp;amp; { # play alarm if fail curl -Ss https://if-someone-buys-this-i-will-be-really-pissed || mpv --no-video --loop ~/.fuckyou.m4a ; } math in shell echo &amp;#39;scale=2; days=15; hours=24; minutes=60; seconds=60; result = days * hours * minutes * seconds; result&amp;#39; | bc last exit status echo ${?} prettify json python -m json.tool simple smtp debug server sudo python -m smtpd -n -c DebuggingServer localhost:25 simple http server python -m http.</description></item><item><title>aws</title><link>https://hellupline.dev/cheatsheet/commands/aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/aws/</guid><description>describe rds, filter by cacertificate version for PROFILE_NAME in &amp;#34;staging&amp;#34; &amp;#34;production&amp;#34;; do aws --profile=&amp;#34;${PROFILE_NAME}&amp;#34; ec2 describe-regions | jq --raw-output &amp;#39;.Regions[].RegionName&amp;#39; | while read REGION_NAME; do aws --profile=&amp;#34;${PROFILE_NAME}&amp;#34; --region=&amp;#34;${REGION_NAME}&amp;#34; rds describe-db-instances | jq --raw-output &amp;#39;.DBInstances[] | select(.CACertificateIdentifier == &amp;#34;rds-ca-2019&amp;#34; or .PendingModifiedValues.CACertificateIdentifier == &amp;#34;rds-ca-2019&amp;#34; | not) | .DBInstanceIdentifier&amp;#39; | while read INSTANCE_NAME; do echo &amp;#34;aws --profile=&amp;#39;${PROFILE_NAME}&amp;#39; --region=&amp;#39;${REGION_NAME}&amp;#39; rds modify-db-instance --db-instance-identifier &amp;#39;${INSTANCE_NAME}&amp;#39; --ca-certificate-identifier rds-ca-2019 --no-certificate-rotation-restart&amp;#34; # echo ${PROFILE_NAME}, ${REGION_NAME}, ${INSTANCE_NAME} done done done list instance and private ips, filter by beanstalk environment aws --profile=default --region=us-east-1 ec2 describe-instances --filter &amp;#34;Name=tag:elasticbeanstalk:environment-name,Values=my-app&amp;#34; | \ jq --raw-output &amp;#39; ( [[&amp;#34;instance-id&amp;#34;, &amp;#34;private-ip&amp;#34;]] + [.</description></item><item><title>curl</title><link>https://hellupline.dev/cheatsheet/commands/curl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/curl/</guid><description>curl debug requests curl \ --silent --show-error \ --fail --fail-early \ --compressed --location \ --create-dirs \ --dump-header - --output - \ --write-out &amp;#39; time_namelookup: %{time_namelookup} time_connect: %{time_connect} time_appconnect: %{time_appconnect} time_pretransfer: %{time_pretransfer} time_redirect: %{time_redirect} time_starttransfer: %{time_starttransfer} ---------- time_total: %{time_total} &amp;#39; \ --request GET --url https://example.com cheatsheets curl https://cht.sh/COMMAND ip address curl https://ifconfig.co/ dns resolve curl -s https://dnsjson.com/hellupline.dev/A.json | jq &amp;#39;.results.records|sort&amp;#39; qr code echo &amp;#34;my text&amp;#34; | curl --form &amp;#39;data=&amp;lt;-&amp;#39; https://qrenco.</description></item><item><title>gpg</title><link>https://hellupline.dev/cheatsheet/commands/gpg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/gpg/</guid><description>list output format # sec rsa4096/xxxxxxxxxxxxxxxx 0000-00-00 [SC] # yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy # uid [ultimate] My Name &amp;lt;me@mail.com&amp;gt; # ssb rsa4096/zzzzzzzzzzzzzzzz 0000-00-00 [E] generate key gpg --full-generate-key encrypt gpg \ --output file.txt.enc \ --encrypt \ --local-user user@example.com \ --recipient another@example.com \ file.txt encrypt with passphrase gpg --output file.txt.enc --symmetric file.txt decrypt gpg --output file.txt --decrypt file.txt.enc sign file gpg --sign --armor file.txt clear sign file gpg --clear-sign file.</description></item><item><title>ssh</title><link>https://hellupline.dev/cheatsheet/commands/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/ssh/</guid><description>generate key ssh-keygen -t rsa -b 4096 -C &amp;#34;me@mail.com&amp;#34; reach server behind bastion ssh -Nnf -L localhost:8080:remote.example.com:5000 me@example.com # cancel forward ssh -O cancel -L localhost:8080:remote.example.com:5000 me@example.com # close opportunistic master ssh -O exit me@example.com reach localhost from bastion ssh -Nnf -R localhost:8080:remote.example.com:5000 me@example.com # cancel forward ssh -O cancel -R localhost:8080:remote.example.com:5000 me@example.com # close opportunistic master ssh -O exit me@example.com create a socks proxy ssh -Nnf -D 8080 me@example.com # cancel forward ssh -O cancel -D 8080 me@example.</description></item><item><title>network</title><link>https://hellupline.dev/cheatsheet/commands/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/network/</guid><description>dns query all records dig @1.1.1.1 example.com ANY query records dig @1.1.1.1 +short example.com AAAA trace records tld dig @1.1.1.1 +trace example.com AAAA curl debug requests curl \ --silent --show-error \ --fail --fail-early \ --compressed --location \ --create-dirs \ --dump-header - --output - \ --write-out &amp;#39; time_namelookup: %{time_namelookup} time_connect: %{time_connect} time_appconnect: %{time_appconnect} time_pretransfer: %{time_pretransfer} time_redirect: %{time_redirect} time_starttransfer: %{time_starttransfer} ---------- time_total: %{time_total} &amp;#39; \ --request GET --url https://example.</description></item><item><title>python</title><link>https://hellupline.dev/cheatsheet/commands/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/python/</guid><description>pipenv install and use python3 -m pip install --upgrade --user pipenv pipenv install boto3 pipenv shell lock and lambda-layer &amp;gt; requirements.txt pipenv lock --requirements python3 -m pip install \ --force-reinstall --no-compile --no-deps \ --target ./layer/python/lib/python3.8/site-packages \ --requirement requirements.txt pip docker &amp;gt; requirements.txt pipenv lock --requirements docker run --rm -it -w /deps -v &amp;#34;${PWD}:/deps&amp;#34; python:3.8 \ python3 -m pip install \ --force-reinstall --no-compile --no-deps \ --target /deps \ --requirement /deps/requirements.</description></item><item><title>desktop-linux</title><link>https://hellupline.dev/cheatsheet/commands/desktop-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/desktop-linux/</guid><description>notifications notify-send --urgency=critical --app-name=hello-nurse TITLE &amp;#34;BODY&amp;#34; clipboard xclip -out -selection clipboard &amp;gt; output.txt xclip -in -selection clipboard &amp;lt; input.txt</description></item><item><title>desktop-osx</title><link>https://hellupline.dev/cheatsheet/commands/desktop-osx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/cheatsheet/commands/desktop-osx/</guid><description>homebrew install homebrew /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; install packages HOMEBREW_NO_AUTO_UPDATE=1 brew install ... HOMEBREW_NO_AUTO_UPDATE=1 brew cask install ... notifications osascript -e &amp;#39;display notification &amp;#34;Body&amp;#34; with title &amp;#34;Title&amp;#34;&amp;#39; text to voice say &amp;#34;Hello World&amp;#34; clipboard pbpaste &amp;gt; output.txt pbcopy &amp;lt; input.txt</description></item></channel></rss>
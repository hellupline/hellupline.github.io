<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>utils on HellUpLine Stuffs</title><link>https://hellupline.dev/scripts/utils/</link><description>Recent content in utils on HellUpLine Stuffs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/scripts/utils/index.xml" rel="self" type="application/rss+xml"/><item><title>make-selfsign-certificate</title><link>https://hellupline.dev/scripts/utils/make-selfsign-certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/make-selfsign-certificate/</guid><description> Download #!/bin/bash # Usage: # make-selfsign-certificate &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist DOMAIN=${1:-localhost} mkdir -p tls-certs openssl req -nodes -x509 -sha256 -days 3650 \ -newkey rsa:4096 \ -keyout tls-certs/service.key \ -out tls-certs/service.pem \ -addext &amp;#34;subjectAltName = DNS:${DOMAIN},IP:::1,IP:127.0.0.1&amp;#34; \ -subj &amp;#34;/O=${DOMAIN}/CN=${DOMAIN}&amp;#34;</description></item><item><title>make-cacert</title><link>https://hellupline.dev/scripts/utils/make-cacert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/make-cacert/</guid><description>Download #!/bin/bash # Usage: # make-cacert &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist DOMAIN=${1:-localhost} mkdir -p tls-certs # create rootca certs openssl genrsa -out tls-certs/rootca.key 4096 openssl req -x509 -new -nodes -sha256 -days 3650 \ -key tls-certs/rootca.key -out tls-certs/rootca.cert \ -subj &amp;#34;/CN=${DOMAIN}/O=${DOMAIN}/OU=${DOMAIN}&amp;#34; # certutil -d sql:$HOME/.pki/nssdb -A -n &amp;#39;personal cert authority&amp;#39; -i .</description></item><item><title>make-cacert-certificate</title><link>https://hellupline.dev/scripts/utils/make-cacert-certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/make-cacert-certificate/</guid><description>Download #!/bin/bash # Usage: # make-cacert-certificate &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist DOMAIN=${1:-localhost} # create application certs openssl genrsa -out tls-certs/service.key 4096 openssl req -new -sha256 -days 3650 \ -addext &amp;#34;subjectAltName = DNS:${DOMAIN},IP:::1,IP:127.0.0.1&amp;#34; \ -key tls-certs/service.key -out tls-certs/service.csr \ -subj &amp;#34;/CN=${DOMAIN}/O=${DOMAIN}/OU=${DOMAIN}&amp;#34; openssl x509 -req -sha256 \ -CA tls-certs/rootca.</description></item><item><title>show-certs</title><link>https://hellupline.dev/scripts/utils/show-certs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/show-certs/</guid><description> Download #!/bin/sh # Usage: # show-certs &amp;#34;hellupline.dev&amp;#34; &amp;#34;360&amp;#34; # show-certs &amp;#34;hellupline.dev&amp;#34; set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -ge 1 ] || die &amp;#34;1 argument required, $#provided&amp;#34; DOMAIN=&amp;#34;${1}&amp;#34; DAYS=&amp;#34;${2:-30}&amp;#34; SECONDS=&amp;#34;$((${DAYS} * 24 * 60 * 60))&amp;#34; openssl s_client -servername &amp;#34;${DOMAIN}&amp;#34; -connect &amp;#34;${DOMAIN}&amp;#34;:443 -showcerts &amp;lt; /dev/null | openssl x509 -noout -text -subject -issuer -dates -checkend &amp;#34;${SECONDS}&amp;#34;</description></item><item><title>lets-encrypt-cname</title><link>https://hellupline.dev/scripts/utils/lets-encrypt-cname/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/lets-encrypt-cname/</guid><description> Download #!/bin/bash # Usage: # lets-encrypt-cname &amp;#34;hellupline.dev&amp;#34; &amp;#34;root@hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 2 ] || die &amp;#34;2 argument required, $#provided&amp;#34; DOMAIN=&amp;#34;${1}&amp;#34; EMAIL=&amp;#34;${2}&amp;#34; docker run --rm -it --name certbot \ --volume &amp;#34;${PWD}/var-lib-letsencrypt:/var/lib/letsencrypt&amp;#34; \ --volume &amp;#34;${PWD}/etc-letsencrypt:/etc/letsencrypt&amp;#34; \ certbot/certbot \ certonly --dry-run \ --manual-public-ip-logging-ok --agree-tos --email=&amp;#34;${EMAIL}&amp;#34; \ --manual \ --preferred-challenges=dns \ --domains=&amp;#34;${DOMAIN}&amp;#34;</description></item><item><title>lets-encrypt-cloudflare</title><link>https://hellupline.dev/scripts/utils/lets-encrypt-cloudflare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/lets-encrypt-cloudflare/</guid><description>Download #!/bin/bash # Usage: # lets-encrypt-cloudflare &amp;#34;CLOUDFLARE_API_KEY&amp;#34; &amp;#34;hellupline.dev&amp;#34; &amp;#34;root@hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 3 ] || die &amp;#34;3 argument required, $#provided&amp;#34; CLOUDFLARE_API_KEY=&amp;#34;${1}&amp;#34; DOMAIN=&amp;#34;${2}&amp;#34; EMAIL=&amp;#34;${3}&amp;#34; echo &amp;#34;dns_cloudflare_api_key=${CLOUDFLARE_API_KEY}\ndns_cloudflare_email=${EMAIL}&amp;#34; &amp;gt; dns-cloudflare.ini chmod 400 dns-cloudflare.ini docker run --rm -it --name certbot \ --volume &amp;#34;${PWD}/var-lib-letsencrypt:/var/lib/letsencrypt&amp;#34; \ --volume &amp;#34;${PWD}/etc-letsencrypt:/etc/letsencrypt&amp;#34; \ --volume &amp;#34;${PWD}/dns-cloudflare.</description></item><item><title>screenshot</title><link>https://hellupline.dev/scripts/utils/screenshot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/screenshot/</guid><description>Download #!/bin/sh # Usage: # $ screenshot [selection|window|all] [&amp;#34;~/pictures/screenshots&amp;#34;] # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist UTCNOW=$(date &amp;#39;+%Y-%m-%dT%T%z&amp;#39;) TYPE=&amp;#34;${1:-selection}&amp;#34; DIRECTORY=&amp;#34;${2:-${HOME}/pictures/screenshots/}&amp;#34; FILENAME=&amp;#34;${DIRECTORY}/${UTCNOW}.png&amp;#34; case &amp;#34;${TYPE}&amp;#34; in &amp;#34;selection&amp;#34;) maim --highlight --color=1.0,1.0,1.0,0.5 --hidecursor \ --select &amp;#34;${FILENAME}&amp;#34; ;; &amp;#34;window&amp;#34;) maim --highlight --color=&amp;#39;1.0,1.0,1.0,0.5&amp;#39; --hidecursor \ --window &amp;#34;$(xdotool getactivewindow)&amp;#34; &amp;#34;${FILENAME}&amp;#34; ;; &amp;#34;all&amp;#34;) maim --highlight --color=1.</description></item><item><title>clipboard-watch</title><link>https://hellupline.dev/scripts/utils/clipboard-watch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/clipboard-watch/</guid><description> Download #!/bin/sh # Usage: # show-certs &amp;#34;hellupline.dev&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist LAST=&amp;#34;&amp;#34; while :; do CURRENT=$(xclip -selection primary -out) if [ &amp;#34;${CURRENT}&amp;#34; != &amp;#34;${LAST}&amp;#34; ]; then notify-send -- &amp;#34;Added ${CURRENT}&amp;#34; LAST=&amp;#34;${CURRENT}&amp;#34; echo &amp;#34;${CURRENT}&amp;#34; fi sleep .1 done</description></item><item><title>cached</title><link>https://hellupline.dev/scripts/utils/cached/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/cached/</guid><description> Download #!/bin/sh # Usage: # $ cached &amp;#34;cache-file&amp;#34; &amp;#34;command&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 2 ] || die &amp;#34;2 argument required, $#provided&amp;#34; FILENAME=&amp;#34;${1}&amp;#34; COMMAND=&amp;#34;${2}&amp;#34; if [ -f &amp;#34;${FILENAME}&amp;#34; ]; then cat &amp;#34;${FILENAME}&amp;#34; else sh -c &amp;#34;${COMMAND}&amp;#34; | tee &amp;#34;${FILENAME}&amp;#34; fi</description></item><item><title>tabular</title><link>https://hellupline.dev/scripts/utils/tabular/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/tabular/</guid><description> Download #!/bin/sh # Usage: # $ cat data.tsv | tabular &amp;#34;|&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist SEPARATOR=&amp;#34;${1:-|}&amp;#34; column -t -s &amp;#34;${SEPARATOR}&amp;#34; | less</description></item><item><title>utcnow</title><link>https://hellupline.dev/scripts/utils/utcnow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/utcnow/</guid><description> Download #!/bin/sh # Usage: # $ utcnow # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist date --utc &amp;#39;+%Y-%m-%dT%T%z&amp;#39;</description></item><item><title>git-cleanup</title><link>https://hellupline.dev/scripts/utils/git-cleanup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/git-cleanup/</guid><description> Download #!/bin/sh # Usage: # $ git-cleanup # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist git checkout master git pull git remote prune origin git branch --merged | grep --extended-regexp --invert-match &amp;#34;(^\*|master|dev)&amp;#34; | xargs git branch --delete</description></item><item><title>blurlock</title><link>https://hellupline.dev/scripts/utils/blurlock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/blurlock/</guid><description> Download #!/bin/sh # Usage: # $ blurlock # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist SCREENSHOT=$(mktemp --suffix=.png) BLUR=$(mktemp --suffix=.png) # take screenshot gm import -window root ${SCREENSHOT} # blur it gm convert ${SCREENSHOT} -blur 0x5 ${BLUR} rm ${SCREENSHOT} # lock the screen i3lock -i ${BLUR} # sleep 1 adds a small delay to prevent possible race conditions with suspend sleep 1</description></item><item><title>play-old</title><link>https://hellupline.dev/scripts/utils/play-old/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/play-old/</guid><description> Download #!/bin/sh # Usage: # $ play-random ./ # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist find &amp;#34;${@}&amp;#34; -type f \ -regextype posix-egrep \ -regex &amp;#39;.*\.(avi|mkv|mp4|wmv|flv|webm)$&amp;#39; \ -printf &amp;#39;%T@ %p\n&amp;#39; \ | sort -k1nr \ | cut -d&amp;#39; &amp;#39; -f2- \ | xargs -d&amp;#39;\n&amp;#39; mpv -quiet</description></item><item><title>play-random</title><link>https://hellupline.dev/scripts/utils/play-random/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/play-random/</guid><description> Download #!/bin/sh # Usage: # $ play-random ./ # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist find &amp;#34;${@}&amp;#34; -type f \ -regextype posix-egrep \ -regex &amp;#39;.*\.(avi|mkv|mp4|wmv|flv|webm)$&amp;#39; \ -printf &amp;#39;%T@ %p\n&amp;#39; \ | sort -R \ | cut -d&amp;#39; &amp;#39; -f2- \ | xargs -d&amp;#39;\n&amp;#39; mpv -quiet</description></item><item><title>spotifyctl</title><link>https://hellupline.dev/scripts/utils/spotifyctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/spotifyctl/</guid><description>Download #!/bin/sh # Usage: # $ spotifyctl # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 1 ] || die &amp;#34;1 argument required, $#provided&amp;#34; COMMAND=&amp;#34;${1}&amp;#34; [ &amp;#34;$(pidof spotify)&amp;#34; != &amp;#34;&amp;#34; ] || die &amp;#34;Spotify not running!&amp;#34; case &amp;#34;${COMMAND}&amp;#34; in &amp;#34;play&amp;#34;|&amp;#34;pause&amp;#34;|&amp;#34;playpause&amp;#34;) dbus-send --print-reply --dest=org.</description></item><item><title>wallpapers</title><link>https://hellupline.dev/scripts/utils/wallpapers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/utils/wallpapers/</guid><description> Download #!/bin/sh # Usage: # $ SLEEP=60 wallpapers ~/wallpapers # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -gt 0 ] || die &amp;#34;1 argument required, $#provided&amp;#34; SOURCES=${@} while true; do feh --recursive --randomize --bg-max --no-fehbg ${SOURCES[@]} sleep &amp;#34;${SLEEP:-60}&amp;#34; done</description></item></channel></rss>
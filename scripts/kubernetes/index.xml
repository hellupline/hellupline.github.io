<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on hellupline notes</title><link>https://hellupline.dev/scripts/kubernetes/</link><description>Recent content in kubernetes on hellupline notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hellupline.dev/scripts/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>kubectl-context-list</title><link>https://hellupline.dev/scripts/kubernetes/kubectl-context-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/kubernetes/kubectl-context-list/</guid><description> Download #!/bin/sh # Usage: # $ kubectl context list # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist kubectl config get-contexts -o name</description></item><item><title>kubectl-context-set</title><link>https://hellupline.dev/scripts/kubernetes/kubectl-context-set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/kubernetes/kubectl-context-set/</guid><description> Download #!/bin/sh # Usage: # $ kubectl context set &amp;#34;my-context&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 1 ] || die &amp;#34;1 argument required, $#provided&amp;#34; NAME=&amp;#34;${1}&amp;#34; kubectl config use-context &amp;#34;${NAME}&amp;#34;</description></item><item><title>kubectl-ingress-health</title><link>https://hellupline.dev/scripts/kubernetes/kubectl-ingress-health/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/kubernetes/kubectl-ingress-health/</guid><description> Download #!/bin/sh # Usage: # $ kubectl ingress health &amp;#34;my-ingress&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 1 ] || die &amp;#34;No argument supplied&amp;#34; NAME=&amp;#34;${1}&amp;#34; kubectl get --output json ingresses &amp;#34;${NAME}&amp;#34; | jq &amp;#39;.metadata.annotations.&amp;#34;ingress.kubernetes.io/backends&amp;#34; | fromjson&amp;#39;</description></item><item><title>kubectl-namespace-list</title><link>https://hellupline.dev/scripts/kubernetes/kubectl-namespace-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/kubernetes/kubectl-namespace-list/</guid><description> Download #!/bin/sh # Usage: # $ kubectl namespace set &amp;#34;my-namespace&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist kubectl get namespaces</description></item><item><title>kubectl-namespace-set</title><link>https://hellupline.dev/scripts/kubernetes/kubectl-namespace-set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/kubernetes/kubectl-namespace-set/</guid><description> Download #!/bin/sh # Usage: # $ kubectl namespace set &amp;#34;my-namespace&amp;#34; # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist die () { echo &amp;gt;&amp;amp;2 &amp;#34;$@&amp;#34; exit 1 } [ &amp;#34;$#&amp;#34; -eq 1 ] || die &amp;#34;1 argument required, $#provided&amp;#34; NAME=&amp;#34;${1}&amp;#34; kubectl config set-context &amp;#34;$(kubectl config current-context)&amp;#34; --namespace=&amp;#34;${NAME}&amp;#34;</description></item><item><title>kubectl-pods-failed</title><link>https://hellupline.dev/scripts/kubernetes/kubectl-pods-failed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/kubernetes/kubectl-pods-failed/</guid><description> Download #!/bin/sh # Usage: # $ kubectl pods failed # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist kubectl get --all-namespaces pods --field-selector=&amp;#39;status.phase=Failed&amp;#39;</description></item><item><title>kubectl-shell</title><link>https://hellupline.dev/scripts/kubernetes/kubectl-shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hellupline.dev/scripts/kubernetes/kubectl-shell/</guid><description> Download #!/bin/sh # Usage: # $ kubectl shell # set -x # verbose set -o pipefail # exit on pipeline error set -e # exit on error set -u # variable must exist IMAGE=${1:-bash} kubectl run --rm -it shell --generator=run-pod/v1 --image=&amp;#34;${IMAGE}&amp;#34;</description></item></channel></rss>